// Code generated by ent, DO NOT EDIT.

package powermetric

import (
	"time"

	"entgo.io/ent/dialect/sql"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldID, id))
}

// SurplusWatt applies equality check predicate on the "surplus_watt" field. It's identical to SurplusWattEQ.
func SurplusWatt(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldSurplusWatt, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldTimestamp, v))
}

// SurplusWattEQ applies the EQ predicate on the "surplus_watt" field.
func SurplusWattEQ(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldSurplusWatt, v))
}

// SurplusWattNEQ applies the NEQ predicate on the "surplus_watt" field.
func SurplusWattNEQ(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldSurplusWatt, v))
}

// SurplusWattIn applies the In predicate on the "surplus_watt" field.
func SurplusWattIn(vs ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldSurplusWatt, vs...))
}

// SurplusWattNotIn applies the NotIn predicate on the "surplus_watt" field.
func SurplusWattNotIn(vs ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldSurplusWatt, vs...))
}

// SurplusWattGT applies the GT predicate on the "surplus_watt" field.
func SurplusWattGT(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldSurplusWatt, v))
}

// SurplusWattGTE applies the GTE predicate on the "surplus_watt" field.
func SurplusWattGTE(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldSurplusWatt, v))
}

// SurplusWattLT applies the LT predicate on the "surplus_watt" field.
func SurplusWattLT(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldSurplusWatt, v))
}

// SurplusWattLTE applies the LTE predicate on the "surplus_watt" field.
func SurplusWattLTE(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldSurplusWatt, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.NotPredicates(p))
}
