// Code generated by ent, DO NOT EDIT.

package powermetric

import (
	"time"

	"entgo.io/ent/dialect/sql"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldName, v))
}

// Watt applies equality check predicate on the "watt" field. It's identical to WattEQ.
func Watt(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldWatt, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldTimestamp, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldContainsFold(FieldName, v))
}

// WattEQ applies the EQ predicate on the "watt" field.
func WattEQ(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldWatt, v))
}

// WattNEQ applies the NEQ predicate on the "watt" field.
func WattNEQ(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldWatt, v))
}

// WattIn applies the In predicate on the "watt" field.
func WattIn(vs ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldWatt, vs...))
}

// WattNotIn applies the NotIn predicate on the "watt" field.
func WattNotIn(vs ...int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldWatt, vs...))
}

// WattGT applies the GT predicate on the "watt" field.
func WattGT(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldWatt, v))
}

// WattGTE applies the GTE predicate on the "watt" field.
func WattGTE(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldWatt, v))
}

// WattLT applies the LT predicate on the "watt" field.
func WattLT(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldWatt, v))
}

// WattLTE applies the LTE predicate on the "watt" field.
func WattLTE(v int) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldWatt, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.PowerMetric {
	return predicate.PowerMetric(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerMetric) predicate.PowerMetric {
	return predicate.PowerMetric(sql.NotPredicates(p))
}
