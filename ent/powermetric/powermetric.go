// Code generated by ent, DO NOT EDIT.

package powermetric

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the powermetric type in the database.
	Label = "power_metric"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSurplusWatt holds the string denoting the surplus_watt field in the database.
	FieldSurplusWatt = "surplus_watt"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the powermetric in the database.
	Table = "power_metrics"
)

// Columns holds all SQL columns for powermetric fields.
var Columns = []string{
	FieldID,
	FieldSurplusWatt,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PowerMetric queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySurplusWatt orders the results by the surplus_watt field.
func BySurplusWatt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurplusWatt, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
