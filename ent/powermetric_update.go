// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/powermetric"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// PowerMetricUpdate is the builder for updating PowerMetric entities.
type PowerMetricUpdate struct {
	config
	hooks    []Hook
	mutation *PowerMetricMutation
}

// Where appends a list predicates to the PowerMetricUpdate builder.
func (pmu *PowerMetricUpdate) Where(ps ...predicate.PowerMetric) *PowerMetricUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetName sets the "name" field.
func (pmu *PowerMetricUpdate) SetName(s string) *PowerMetricUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmu *PowerMetricUpdate) SetNillableName(s *string) *PowerMetricUpdate {
	if s != nil {
		pmu.SetName(*s)
	}
	return pmu
}

// SetWatt sets the "watt" field.
func (pmu *PowerMetricUpdate) SetWatt(i int) *PowerMetricUpdate {
	pmu.mutation.ResetWatt()
	pmu.mutation.SetWatt(i)
	return pmu
}

// SetNillableWatt sets the "watt" field if the given value is not nil.
func (pmu *PowerMetricUpdate) SetNillableWatt(i *int) *PowerMetricUpdate {
	if i != nil {
		pmu.SetWatt(*i)
	}
	return pmu
}

// AddWatt adds i to the "watt" field.
func (pmu *PowerMetricUpdate) AddWatt(i int) *PowerMetricUpdate {
	pmu.mutation.AddWatt(i)
	return pmu
}

// SetTimestamp sets the "timestamp" field.
func (pmu *PowerMetricUpdate) SetTimestamp(t time.Time) *PowerMetricUpdate {
	pmu.mutation.SetTimestamp(t)
	return pmu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pmu *PowerMetricUpdate) SetNillableTimestamp(t *time.Time) *PowerMetricUpdate {
	if t != nil {
		pmu.SetTimestamp(*t)
	}
	return pmu
}

// Mutation returns the PowerMetricMutation object of the builder.
func (pmu *PowerMetricUpdate) Mutation() *PowerMetricMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PowerMetricUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PowerMetricUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PowerMetricUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PowerMetricUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PowerMetricUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(powermetric.Table, powermetric.Columns, sqlgraph.NewFieldSpec(powermetric.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(powermetric.FieldName, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Watt(); ok {
		_spec.SetField(powermetric.FieldWatt, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AddedWatt(); ok {
		_spec.AddField(powermetric.FieldWatt, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.Timestamp(); ok {
		_spec.SetField(powermetric.FieldTimestamp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powermetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PowerMetricUpdateOne is the builder for updating a single PowerMetric entity.
type PowerMetricUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PowerMetricMutation
}

// SetName sets the "name" field.
func (pmuo *PowerMetricUpdateOne) SetName(s string) *PowerMetricUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmuo *PowerMetricUpdateOne) SetNillableName(s *string) *PowerMetricUpdateOne {
	if s != nil {
		pmuo.SetName(*s)
	}
	return pmuo
}

// SetWatt sets the "watt" field.
func (pmuo *PowerMetricUpdateOne) SetWatt(i int) *PowerMetricUpdateOne {
	pmuo.mutation.ResetWatt()
	pmuo.mutation.SetWatt(i)
	return pmuo
}

// SetNillableWatt sets the "watt" field if the given value is not nil.
func (pmuo *PowerMetricUpdateOne) SetNillableWatt(i *int) *PowerMetricUpdateOne {
	if i != nil {
		pmuo.SetWatt(*i)
	}
	return pmuo
}

// AddWatt adds i to the "watt" field.
func (pmuo *PowerMetricUpdateOne) AddWatt(i int) *PowerMetricUpdateOne {
	pmuo.mutation.AddWatt(i)
	return pmuo
}

// SetTimestamp sets the "timestamp" field.
func (pmuo *PowerMetricUpdateOne) SetTimestamp(t time.Time) *PowerMetricUpdateOne {
	pmuo.mutation.SetTimestamp(t)
	return pmuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pmuo *PowerMetricUpdateOne) SetNillableTimestamp(t *time.Time) *PowerMetricUpdateOne {
	if t != nil {
		pmuo.SetTimestamp(*t)
	}
	return pmuo
}

// Mutation returns the PowerMetricMutation object of the builder.
func (pmuo *PowerMetricUpdateOne) Mutation() *PowerMetricMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PowerMetricUpdate builder.
func (pmuo *PowerMetricUpdateOne) Where(ps ...predicate.PowerMetric) *PowerMetricUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PowerMetricUpdateOne) Select(field string, fields ...string) *PowerMetricUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PowerMetric entity.
func (pmuo *PowerMetricUpdateOne) Save(ctx context.Context) (*PowerMetric, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PowerMetricUpdateOne) SaveX(ctx context.Context) *PowerMetric {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PowerMetricUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PowerMetricUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PowerMetricUpdateOne) sqlSave(ctx context.Context) (_node *PowerMetric, err error) {
	_spec := sqlgraph.NewUpdateSpec(powermetric.Table, powermetric.Columns, sqlgraph.NewFieldSpec(powermetric.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PowerMetric.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, powermetric.FieldID)
		for _, f := range fields {
			if !powermetric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != powermetric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(powermetric.FieldName, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Watt(); ok {
		_spec.SetField(powermetric.FieldWatt, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AddedWatt(); ok {
		_spec.AddField(powermetric.FieldWatt, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.Timestamp(); ok {
		_spec.SetField(powermetric.FieldTimestamp, field.TypeTime, value)
	}
	_node = &PowerMetric{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powermetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
