// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/powermetric"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// PowerMetricDelete is the builder for deleting a PowerMetric entity.
type PowerMetricDelete struct {
	config
	hooks    []Hook
	mutation *PowerMetricMutation
}

// Where appends a list predicates to the PowerMetricDelete builder.
func (pmd *PowerMetricDelete) Where(ps ...predicate.PowerMetric) *PowerMetricDelete {
	pmd.mutation.Where(ps...)
	return pmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pmd *PowerMetricDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pmd.sqlExec, pmd.mutation, pmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pmd *PowerMetricDelete) ExecX(ctx context.Context) int {
	n, err := pmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pmd *PowerMetricDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(powermetric.Table, sqlgraph.NewFieldSpec(powermetric.FieldID, field.TypeInt))
	if ps := pmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pmd.mutation.done = true
	return affected, err
}

// PowerMetricDeleteOne is the builder for deleting a single PowerMetric entity.
type PowerMetricDeleteOne struct {
	pmd *PowerMetricDelete
}

// Where appends a list predicates to the PowerMetricDelete builder.
func (pmdo *PowerMetricDeleteOne) Where(ps ...predicate.PowerMetric) *PowerMetricDeleteOne {
	pmdo.pmd.mutation.Where(ps...)
	return pmdo
}

// Exec executes the deletion query.
func (pmdo *PowerMetricDeleteOne) Exec(ctx context.Context) error {
	n, err := pmdo.pmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{powermetric.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pmdo *PowerMetricDeleteOne) ExecX(ctx context.Context) {
	if err := pmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
