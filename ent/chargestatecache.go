// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargestatecache"
)

// ChargeStateCache is the model entity for the ChargeStateCache schema.
type ChargeStateCache struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Vin holds the value of the "vin" field.
	Vin string `json:"vin,omitempty"`
	// BatteryLevel holds the value of the "battery_level" field.
	BatteryLevel int `json:"battery_level,omitempty"`
	// BatteryRange holds the value of the "battery_range" field.
	BatteryRange float32 `json:"battery_range,omitempty"`
	// ChargeAmps holds the value of the "charge_amps" field.
	ChargeAmps int `json:"charge_amps,omitempty"`
	// ChargeCurrentRequest holds the value of the "charge_current_request" field.
	ChargeCurrentRequest int `json:"charge_current_request,omitempty"`
	// ChargeCurrentRequestMax holds the value of the "charge_current_request_max" field.
	ChargeCurrentRequestMax int `json:"charge_current_request_max,omitempty"`
	// ChargeEnableRequest holds the value of the "charge_enable_request" field.
	ChargeEnableRequest bool `json:"charge_enable_request,omitempty"`
	// ChargeLimitSoc holds the value of the "charge_limit_soc" field.
	ChargeLimitSoc int `json:"charge_limit_soc,omitempty"`
	// ChargePortDoorOpen holds the value of the "charge_port_door_open" field.
	ChargePortDoorOpen bool `json:"charge_port_door_open,omitempty"`
	// ChargePortLatch holds the value of the "charge_port_latch" field.
	ChargePortLatch string `json:"charge_port_latch,omitempty"`
	// ChargerActualCurrent holds the value of the "charger_actual_current" field.
	ChargerActualCurrent int `json:"charger_actual_current,omitempty"`
	// ChargerVoltage holds the value of the "charger_voltage" field.
	ChargerVoltage int `json:"charger_voltage,omitempty"`
	// ChargingState holds the value of the "charging_state" field.
	ChargingState string `json:"charging_state,omitempty"`
	// MinutesToFullCharge holds the value of the "minutes_to_full_charge" field.
	MinutesToFullCharge int `json:"minutes_to_full_charge,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// UsableBatteryLevel holds the value of the "usable_battery_level" field.
	UsableBatteryLevel int `json:"usable_battery_level,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChargeStateCache) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chargestatecache.FieldChargeEnableRequest, chargestatecache.FieldChargePortDoorOpen:
			values[i] = new(sql.NullBool)
		case chargestatecache.FieldBatteryRange:
			values[i] = new(sql.NullFloat64)
		case chargestatecache.FieldID, chargestatecache.FieldBatteryLevel, chargestatecache.FieldChargeAmps, chargestatecache.FieldChargeCurrentRequest, chargestatecache.FieldChargeCurrentRequestMax, chargestatecache.FieldChargeLimitSoc, chargestatecache.FieldChargerActualCurrent, chargestatecache.FieldChargerVoltage, chargestatecache.FieldMinutesToFullCharge, chargestatecache.FieldUsableBatteryLevel:
			values[i] = new(sql.NullInt64)
		case chargestatecache.FieldVin, chargestatecache.FieldChargePortLatch, chargestatecache.FieldChargingState:
			values[i] = new(sql.NullString)
		case chargestatecache.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChargeStateCache fields.
func (csc *ChargeStateCache) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chargestatecache.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csc.ID = int(value.Int64)
		case chargestatecache.FieldVin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vin", values[i])
			} else if value.Valid {
				csc.Vin = value.String
			}
		case chargestatecache.FieldBatteryLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_level", values[i])
			} else if value.Valid {
				csc.BatteryLevel = int(value.Int64)
			}
		case chargestatecache.FieldBatteryRange:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_range", values[i])
			} else if value.Valid {
				csc.BatteryRange = float32(value.Float64)
			}
		case chargestatecache.FieldChargeAmps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charge_amps", values[i])
			} else if value.Valid {
				csc.ChargeAmps = int(value.Int64)
			}
		case chargestatecache.FieldChargeCurrentRequest:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charge_current_request", values[i])
			} else if value.Valid {
				csc.ChargeCurrentRequest = int(value.Int64)
			}
		case chargestatecache.FieldChargeCurrentRequestMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charge_current_request_max", values[i])
			} else if value.Valid {
				csc.ChargeCurrentRequestMax = int(value.Int64)
			}
		case chargestatecache.FieldChargeEnableRequest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field charge_enable_request", values[i])
			} else if value.Valid {
				csc.ChargeEnableRequest = value.Bool
			}
		case chargestatecache.FieldChargeLimitSoc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charge_limit_soc", values[i])
			} else if value.Valid {
				csc.ChargeLimitSoc = int(value.Int64)
			}
		case chargestatecache.FieldChargePortDoorOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field charge_port_door_open", values[i])
			} else if value.Valid {
				csc.ChargePortDoorOpen = value.Bool
			}
		case chargestatecache.FieldChargePortLatch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_port_latch", values[i])
			} else if value.Valid {
				csc.ChargePortLatch = value.String
			}
		case chargestatecache.FieldChargerActualCurrent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charger_actual_current", values[i])
			} else if value.Valid {
				csc.ChargerActualCurrent = int(value.Int64)
			}
		case chargestatecache.FieldChargerVoltage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charger_voltage", values[i])
			} else if value.Valid {
				csc.ChargerVoltage = int(value.Int64)
			}
		case chargestatecache.FieldChargingState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charging_state", values[i])
			} else if value.Valid {
				csc.ChargingState = value.String
			}
		case chargestatecache.FieldMinutesToFullCharge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes_to_full_charge", values[i])
			} else if value.Valid {
				csc.MinutesToFullCharge = int(value.Int64)
			}
		case chargestatecache.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				csc.Timestamp = value.Time
			}
		case chargestatecache.FieldUsableBatteryLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usable_battery_level", values[i])
			} else if value.Valid {
				csc.UsableBatteryLevel = int(value.Int64)
			}
		default:
			csc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChargeStateCache.
// This includes values selected through modifiers, order, etc.
func (csc *ChargeStateCache) Value(name string) (ent.Value, error) {
	return csc.selectValues.Get(name)
}

// Update returns a builder for updating this ChargeStateCache.
// Note that you need to call ChargeStateCache.Unwrap() before calling this method if this ChargeStateCache
// was returned from a transaction, and the transaction was committed or rolled back.
func (csc *ChargeStateCache) Update() *ChargeStateCacheUpdateOne {
	return NewChargeStateCacheClient(csc.config).UpdateOne(csc)
}

// Unwrap unwraps the ChargeStateCache entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csc *ChargeStateCache) Unwrap() *ChargeStateCache {
	_tx, ok := csc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChargeStateCache is not a transactional entity")
	}
	csc.config.driver = _tx.drv
	return csc
}

// String implements the fmt.Stringer.
func (csc *ChargeStateCache) String() string {
	var builder strings.Builder
	builder.WriteString("ChargeStateCache(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csc.ID))
	builder.WriteString("vin=")
	builder.WriteString(csc.Vin)
	builder.WriteString(", ")
	builder.WriteString("battery_level=")
	builder.WriteString(fmt.Sprintf("%v", csc.BatteryLevel))
	builder.WriteString(", ")
	builder.WriteString("battery_range=")
	builder.WriteString(fmt.Sprintf("%v", csc.BatteryRange))
	builder.WriteString(", ")
	builder.WriteString("charge_amps=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargeAmps))
	builder.WriteString(", ")
	builder.WriteString("charge_current_request=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargeCurrentRequest))
	builder.WriteString(", ")
	builder.WriteString("charge_current_request_max=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargeCurrentRequestMax))
	builder.WriteString(", ")
	builder.WriteString("charge_enable_request=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargeEnableRequest))
	builder.WriteString(", ")
	builder.WriteString("charge_limit_soc=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargeLimitSoc))
	builder.WriteString(", ")
	builder.WriteString("charge_port_door_open=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargePortDoorOpen))
	builder.WriteString(", ")
	builder.WriteString("charge_port_latch=")
	builder.WriteString(csc.ChargePortLatch)
	builder.WriteString(", ")
	builder.WriteString("charger_actual_current=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargerActualCurrent))
	builder.WriteString(", ")
	builder.WriteString("charger_voltage=")
	builder.WriteString(fmt.Sprintf("%v", csc.ChargerVoltage))
	builder.WriteString(", ")
	builder.WriteString("charging_state=")
	builder.WriteString(csc.ChargingState)
	builder.WriteString(", ")
	builder.WriteString("minutes_to_full_charge=")
	builder.WriteString(fmt.Sprintf("%v", csc.MinutesToFullCharge))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(csc.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("usable_battery_level=")
	builder.WriteString(fmt.Sprintf("%v", csc.UsableBatteryLevel))
	builder.WriteByte(')')
	return builder.String()
}

// ChargeStateCaches is a parsable slice of ChargeStateCache.
type ChargeStateCaches []*ChargeStateCache
