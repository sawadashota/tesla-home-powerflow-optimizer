// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/grant"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
}

// SetSubject sets the "subject" field.
func (gc *GrantCreate) SetSubject(s string) *GrantCreate {
	gc.mutation.SetSubject(s)
	return gc
}

// SetAccessToken sets the "access_token" field.
func (gc *GrantCreate) SetAccessToken(s string) *GrantCreate {
	gc.mutation.SetAccessToken(s)
	return gc
}

// SetRefreshToken sets the "refresh_token" field.
func (gc *GrantCreate) SetRefreshToken(s string) *GrantCreate {
	gc.mutation.SetRefreshToken(s)
	return gc
}

// SetScope sets the "scope" field.
func (gc *GrantCreate) SetScope(s string) *GrantCreate {
	gc.mutation.SetScope(s)
	return gc
}

// SetExpiry sets the "expiry" field.
func (gc *GrantCreate) SetExpiry(t time.Time) *GrantCreate {
	gc.mutation.SetExpiry(t)
	return gc
}

// Mutation returns the GrantMutation object of the builder.
func (gc *GrantCreate) Mutation() *GrantMutation {
	return gc.mutation
}

// Save creates the Grant in the database.
func (gc *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GrantCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GrantCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GrantCreate) check() error {
	if _, ok := gc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Grant.subject"`)}
	}
	if v, ok := gc.mutation.Subject(); ok {
		if err := grant.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Grant.subject": %w`, err)}
		}
	}
	if _, ok := gc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "Grant.access_token"`)}
	}
	if v, ok := gc.mutation.AccessToken(); ok {
		if err := grant.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "Grant.access_token": %w`, err)}
		}
	}
	if _, ok := gc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "Grant.refresh_token"`)}
	}
	if v, ok := gc.mutation.RefreshToken(); ok {
		if err := grant.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "Grant.refresh_token": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Grant.scope"`)}
	}
	if v, ok := gc.mutation.Scope(); ok {
		if err := grant.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "Grant.scope": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Expiry(); !ok {
		return &ValidationError{Name: "expiry", err: errors.New(`ent: missing required field "Grant.expiry"`)}
	}
	return nil
}

func (gc *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(grant.Table, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Subject(); ok {
		_spec.SetField(grant.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := gc.mutation.AccessToken(); ok {
		_spec.SetField(grant.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := gc.mutation.RefreshToken(); ok {
		_spec.SetField(grant.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := gc.mutation.Scope(); ok {
		_spec.SetField(grant.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := gc.mutation.Expiry(); ok {
		_spec.SetField(grant.FieldExpiry, field.TypeTime, value)
		_node.Expiry = value
	}
	return _node, _spec
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	err      error
	builders []*GrantCreate
}

// Save creates the Grant entities in the database.
func (gcb *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Grant, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GrantCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GrantCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
