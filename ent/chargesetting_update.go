// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargesetting"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ChargeSettingUpdate is the builder for updating ChargeSetting entities.
type ChargeSettingUpdate struct {
	config
	hooks    []Hook
	mutation *ChargeSettingMutation
}

// Where appends a list predicates to the ChargeSettingUpdate builder.
func (csu *ChargeSettingUpdate) Where(ps ...predicate.ChargeSetting) *ChargeSettingUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetEnabled sets the "enabled" field.
func (csu *ChargeSettingUpdate) SetEnabled(b bool) *ChargeSettingUpdate {
	csu.mutation.SetEnabled(b)
	return csu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableEnabled(b *bool) *ChargeSettingUpdate {
	if b != nil {
		csu.SetEnabled(*b)
	}
	return csu
}

// SetChargeStartThreshold sets the "charge_start_threshold" field.
func (csu *ChargeSettingUpdate) SetChargeStartThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.ResetChargeStartThreshold()
	csu.mutation.SetChargeStartThreshold(i)
	return csu
}

// SetNillableChargeStartThreshold sets the "charge_start_threshold" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableChargeStartThreshold(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetChargeStartThreshold(*i)
	}
	return csu
}

// AddChargeStartThreshold adds i to the "charge_start_threshold" field.
func (csu *ChargeSettingUpdate) AddChargeStartThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.AddChargeStartThreshold(i)
	return csu
}

// SetPowerUsageIncreaseThreshold sets the "power_usage_increase_threshold" field.
func (csu *ChargeSettingUpdate) SetPowerUsageIncreaseThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.ResetPowerUsageIncreaseThreshold()
	csu.mutation.SetPowerUsageIncreaseThreshold(i)
	return csu
}

// SetNillablePowerUsageIncreaseThreshold sets the "power_usage_increase_threshold" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillablePowerUsageIncreaseThreshold(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetPowerUsageIncreaseThreshold(*i)
	}
	return csu
}

// AddPowerUsageIncreaseThreshold adds i to the "power_usage_increase_threshold" field.
func (csu *ChargeSettingUpdate) AddPowerUsageIncreaseThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.AddPowerUsageIncreaseThreshold(i)
	return csu
}

// SetPowerUsageDecreaseThreshold sets the "power_usage_decrease_threshold" field.
func (csu *ChargeSettingUpdate) SetPowerUsageDecreaseThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.ResetPowerUsageDecreaseThreshold()
	csu.mutation.SetPowerUsageDecreaseThreshold(i)
	return csu
}

// SetNillablePowerUsageDecreaseThreshold sets the "power_usage_decrease_threshold" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillablePowerUsageDecreaseThreshold(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetPowerUsageDecreaseThreshold(*i)
	}
	return csu
}

// AddPowerUsageDecreaseThreshold adds i to the "power_usage_decrease_threshold" field.
func (csu *ChargeSettingUpdate) AddPowerUsageDecreaseThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.AddPowerUsageDecreaseThreshold(i)
	return csu
}

// SetUpdateInterval sets the "update_interval" field.
func (csu *ChargeSettingUpdate) SetUpdateInterval(i int) *ChargeSettingUpdate {
	csu.mutation.ResetUpdateInterval()
	csu.mutation.SetUpdateInterval(i)
	return csu
}

// SetNillableUpdateInterval sets the "update_interval" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableUpdateInterval(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetUpdateInterval(*i)
	}
	return csu
}

// AddUpdateInterval adds i to the "update_interval" field.
func (csu *ChargeSettingUpdate) AddUpdateInterval(i int) *ChargeSettingUpdate {
	csu.mutation.AddUpdateInterval(i)
	return csu
}

// SetMinChargeThreshold sets the "min_charge_threshold" field.
func (csu *ChargeSettingUpdate) SetMinChargeThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.ResetMinChargeThreshold()
	csu.mutation.SetMinChargeThreshold(i)
	return csu
}

// SetNillableMinChargeThreshold sets the "min_charge_threshold" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableMinChargeThreshold(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetMinChargeThreshold(*i)
	}
	return csu
}

// AddMinChargeThreshold adds i to the "min_charge_threshold" field.
func (csu *ChargeSettingUpdate) AddMinChargeThreshold(i int) *ChargeSettingUpdate {
	csu.mutation.AddMinChargeThreshold(i)
	return csu
}

// SetMinChargeTimeRangeStart sets the "min_charge_time_range_start" field.
func (csu *ChargeSettingUpdate) SetMinChargeTimeRangeStart(s string) *ChargeSettingUpdate {
	csu.mutation.SetMinChargeTimeRangeStart(s)
	return csu
}

// SetNillableMinChargeTimeRangeStart sets the "min_charge_time_range_start" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableMinChargeTimeRangeStart(s *string) *ChargeSettingUpdate {
	if s != nil {
		csu.SetMinChargeTimeRangeStart(*s)
	}
	return csu
}

// SetMinChargeTimeRangeEnd sets the "min_charge_time_range_end" field.
func (csu *ChargeSettingUpdate) SetMinChargeTimeRangeEnd(s string) *ChargeSettingUpdate {
	csu.mutation.SetMinChargeTimeRangeEnd(s)
	return csu
}

// SetNillableMinChargeTimeRangeEnd sets the "min_charge_time_range_end" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableMinChargeTimeRangeEnd(s *string) *ChargeSettingUpdate {
	if s != nil {
		csu.SetMinChargeTimeRangeEnd(*s)
	}
	return csu
}

// SetMinChargeAmperage sets the "min_charge_amperage" field.
func (csu *ChargeSettingUpdate) SetMinChargeAmperage(i int) *ChargeSettingUpdate {
	csu.mutation.ResetMinChargeAmperage()
	csu.mutation.SetMinChargeAmperage(i)
	return csu
}

// SetNillableMinChargeAmperage sets the "min_charge_amperage" field if the given value is not nil.
func (csu *ChargeSettingUpdate) SetNillableMinChargeAmperage(i *int) *ChargeSettingUpdate {
	if i != nil {
		csu.SetMinChargeAmperage(*i)
	}
	return csu
}

// AddMinChargeAmperage adds i to the "min_charge_amperage" field.
func (csu *ChargeSettingUpdate) AddMinChargeAmperage(i int) *ChargeSettingUpdate {
	csu.mutation.AddMinChargeAmperage(i)
	return csu
}

// Mutation returns the ChargeSettingMutation object of the builder.
func (csu *ChargeSettingUpdate) Mutation() *ChargeSettingMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ChargeSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ChargeSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ChargeSettingUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ChargeSettingUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *ChargeSettingUpdate) check() error {
	if v, ok := csu.mutation.MinChargeThreshold(); ok {
		if err := chargesetting.MinChargeThresholdValidator(v); err != nil {
			return &ValidationError{Name: "min_charge_threshold", err: fmt.Errorf(`ent: validator failed for field "ChargeSetting.min_charge_threshold": %w`, err)}
		}
	}
	if v, ok := csu.mutation.MinChargeAmperage(); ok {
		if err := chargesetting.MinChargeAmperageValidator(v); err != nil {
			return &ValidationError{Name: "min_charge_amperage", err: fmt.Errorf(`ent: validator failed for field "ChargeSetting.min_charge_amperage": %w`, err)}
		}
	}
	return nil
}

func (csu *ChargeSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chargesetting.Table, chargesetting.Columns, sqlgraph.NewFieldSpec(chargesetting.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Enabled(); ok {
		_spec.SetField(chargesetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := csu.mutation.ChargeStartThreshold(); ok {
		_spec.SetField(chargesetting.FieldChargeStartThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedChargeStartThreshold(); ok {
		_spec.AddField(chargesetting.FieldChargeStartThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.PowerUsageIncreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageIncreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedPowerUsageIncreaseThreshold(); ok {
		_spec.AddField(chargesetting.FieldPowerUsageIncreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.PowerUsageDecreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageDecreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedPowerUsageDecreaseThreshold(); ok {
		_spec.AddField(chargesetting.FieldPowerUsageDecreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.UpdateInterval(); ok {
		_spec.SetField(chargesetting.FieldUpdateInterval, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedUpdateInterval(); ok {
		_spec.AddField(chargesetting.FieldUpdateInterval, field.TypeInt, value)
	}
	if value, ok := csu.mutation.MinChargeThreshold(); ok {
		_spec.SetField(chargesetting.FieldMinChargeThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedMinChargeThreshold(); ok {
		_spec.AddField(chargesetting.FieldMinChargeThreshold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.MinChargeTimeRangeStart(); ok {
		_spec.SetField(chargesetting.FieldMinChargeTimeRangeStart, field.TypeString, value)
	}
	if value, ok := csu.mutation.MinChargeTimeRangeEnd(); ok {
		_spec.SetField(chargesetting.FieldMinChargeTimeRangeEnd, field.TypeString, value)
	}
	if value, ok := csu.mutation.MinChargeAmperage(); ok {
		_spec.SetField(chargesetting.FieldMinChargeAmperage, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedMinChargeAmperage(); ok {
		_spec.AddField(chargesetting.FieldMinChargeAmperage, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ChargeSettingUpdateOne is the builder for updating a single ChargeSetting entity.
type ChargeSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChargeSettingMutation
}

// SetEnabled sets the "enabled" field.
func (csuo *ChargeSettingUpdateOne) SetEnabled(b bool) *ChargeSettingUpdateOne {
	csuo.mutation.SetEnabled(b)
	return csuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableEnabled(b *bool) *ChargeSettingUpdateOne {
	if b != nil {
		csuo.SetEnabled(*b)
	}
	return csuo
}

// SetChargeStartThreshold sets the "charge_start_threshold" field.
func (csuo *ChargeSettingUpdateOne) SetChargeStartThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetChargeStartThreshold()
	csuo.mutation.SetChargeStartThreshold(i)
	return csuo
}

// SetNillableChargeStartThreshold sets the "charge_start_threshold" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableChargeStartThreshold(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetChargeStartThreshold(*i)
	}
	return csuo
}

// AddChargeStartThreshold adds i to the "charge_start_threshold" field.
func (csuo *ChargeSettingUpdateOne) AddChargeStartThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddChargeStartThreshold(i)
	return csuo
}

// SetPowerUsageIncreaseThreshold sets the "power_usage_increase_threshold" field.
func (csuo *ChargeSettingUpdateOne) SetPowerUsageIncreaseThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetPowerUsageIncreaseThreshold()
	csuo.mutation.SetPowerUsageIncreaseThreshold(i)
	return csuo
}

// SetNillablePowerUsageIncreaseThreshold sets the "power_usage_increase_threshold" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillablePowerUsageIncreaseThreshold(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetPowerUsageIncreaseThreshold(*i)
	}
	return csuo
}

// AddPowerUsageIncreaseThreshold adds i to the "power_usage_increase_threshold" field.
func (csuo *ChargeSettingUpdateOne) AddPowerUsageIncreaseThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddPowerUsageIncreaseThreshold(i)
	return csuo
}

// SetPowerUsageDecreaseThreshold sets the "power_usage_decrease_threshold" field.
func (csuo *ChargeSettingUpdateOne) SetPowerUsageDecreaseThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetPowerUsageDecreaseThreshold()
	csuo.mutation.SetPowerUsageDecreaseThreshold(i)
	return csuo
}

// SetNillablePowerUsageDecreaseThreshold sets the "power_usage_decrease_threshold" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillablePowerUsageDecreaseThreshold(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetPowerUsageDecreaseThreshold(*i)
	}
	return csuo
}

// AddPowerUsageDecreaseThreshold adds i to the "power_usage_decrease_threshold" field.
func (csuo *ChargeSettingUpdateOne) AddPowerUsageDecreaseThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddPowerUsageDecreaseThreshold(i)
	return csuo
}

// SetUpdateInterval sets the "update_interval" field.
func (csuo *ChargeSettingUpdateOne) SetUpdateInterval(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetUpdateInterval()
	csuo.mutation.SetUpdateInterval(i)
	return csuo
}

// SetNillableUpdateInterval sets the "update_interval" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableUpdateInterval(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetUpdateInterval(*i)
	}
	return csuo
}

// AddUpdateInterval adds i to the "update_interval" field.
func (csuo *ChargeSettingUpdateOne) AddUpdateInterval(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddUpdateInterval(i)
	return csuo
}

// SetMinChargeThreshold sets the "min_charge_threshold" field.
func (csuo *ChargeSettingUpdateOne) SetMinChargeThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetMinChargeThreshold()
	csuo.mutation.SetMinChargeThreshold(i)
	return csuo
}

// SetNillableMinChargeThreshold sets the "min_charge_threshold" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableMinChargeThreshold(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetMinChargeThreshold(*i)
	}
	return csuo
}

// AddMinChargeThreshold adds i to the "min_charge_threshold" field.
func (csuo *ChargeSettingUpdateOne) AddMinChargeThreshold(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddMinChargeThreshold(i)
	return csuo
}

// SetMinChargeTimeRangeStart sets the "min_charge_time_range_start" field.
func (csuo *ChargeSettingUpdateOne) SetMinChargeTimeRangeStart(s string) *ChargeSettingUpdateOne {
	csuo.mutation.SetMinChargeTimeRangeStart(s)
	return csuo
}

// SetNillableMinChargeTimeRangeStart sets the "min_charge_time_range_start" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableMinChargeTimeRangeStart(s *string) *ChargeSettingUpdateOne {
	if s != nil {
		csuo.SetMinChargeTimeRangeStart(*s)
	}
	return csuo
}

// SetMinChargeTimeRangeEnd sets the "min_charge_time_range_end" field.
func (csuo *ChargeSettingUpdateOne) SetMinChargeTimeRangeEnd(s string) *ChargeSettingUpdateOne {
	csuo.mutation.SetMinChargeTimeRangeEnd(s)
	return csuo
}

// SetNillableMinChargeTimeRangeEnd sets the "min_charge_time_range_end" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableMinChargeTimeRangeEnd(s *string) *ChargeSettingUpdateOne {
	if s != nil {
		csuo.SetMinChargeTimeRangeEnd(*s)
	}
	return csuo
}

// SetMinChargeAmperage sets the "min_charge_amperage" field.
func (csuo *ChargeSettingUpdateOne) SetMinChargeAmperage(i int) *ChargeSettingUpdateOne {
	csuo.mutation.ResetMinChargeAmperage()
	csuo.mutation.SetMinChargeAmperage(i)
	return csuo
}

// SetNillableMinChargeAmperage sets the "min_charge_amperage" field if the given value is not nil.
func (csuo *ChargeSettingUpdateOne) SetNillableMinChargeAmperage(i *int) *ChargeSettingUpdateOne {
	if i != nil {
		csuo.SetMinChargeAmperage(*i)
	}
	return csuo
}

// AddMinChargeAmperage adds i to the "min_charge_amperage" field.
func (csuo *ChargeSettingUpdateOne) AddMinChargeAmperage(i int) *ChargeSettingUpdateOne {
	csuo.mutation.AddMinChargeAmperage(i)
	return csuo
}

// Mutation returns the ChargeSettingMutation object of the builder.
func (csuo *ChargeSettingUpdateOne) Mutation() *ChargeSettingMutation {
	return csuo.mutation
}

// Where appends a list predicates to the ChargeSettingUpdate builder.
func (csuo *ChargeSettingUpdateOne) Where(ps ...predicate.ChargeSetting) *ChargeSettingUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ChargeSettingUpdateOne) Select(field string, fields ...string) *ChargeSettingUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ChargeSetting entity.
func (csuo *ChargeSettingUpdateOne) Save(ctx context.Context) (*ChargeSetting, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ChargeSettingUpdateOne) SaveX(ctx context.Context) *ChargeSetting {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ChargeSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ChargeSettingUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *ChargeSettingUpdateOne) check() error {
	if v, ok := csuo.mutation.MinChargeThreshold(); ok {
		if err := chargesetting.MinChargeThresholdValidator(v); err != nil {
			return &ValidationError{Name: "min_charge_threshold", err: fmt.Errorf(`ent: validator failed for field "ChargeSetting.min_charge_threshold": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.MinChargeAmperage(); ok {
		if err := chargesetting.MinChargeAmperageValidator(v); err != nil {
			return &ValidationError{Name: "min_charge_amperage", err: fmt.Errorf(`ent: validator failed for field "ChargeSetting.min_charge_amperage": %w`, err)}
		}
	}
	return nil
}

func (csuo *ChargeSettingUpdateOne) sqlSave(ctx context.Context) (_node *ChargeSetting, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chargesetting.Table, chargesetting.Columns, sqlgraph.NewFieldSpec(chargesetting.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChargeSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chargesetting.FieldID)
		for _, f := range fields {
			if !chargesetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chargesetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Enabled(); ok {
		_spec.SetField(chargesetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.ChargeStartThreshold(); ok {
		_spec.SetField(chargesetting.FieldChargeStartThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedChargeStartThreshold(); ok {
		_spec.AddField(chargesetting.FieldChargeStartThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.PowerUsageIncreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageIncreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedPowerUsageIncreaseThreshold(); ok {
		_spec.AddField(chargesetting.FieldPowerUsageIncreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.PowerUsageDecreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageDecreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedPowerUsageDecreaseThreshold(); ok {
		_spec.AddField(chargesetting.FieldPowerUsageDecreaseThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.UpdateInterval(); ok {
		_spec.SetField(chargesetting.FieldUpdateInterval, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedUpdateInterval(); ok {
		_spec.AddField(chargesetting.FieldUpdateInterval, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.MinChargeThreshold(); ok {
		_spec.SetField(chargesetting.FieldMinChargeThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedMinChargeThreshold(); ok {
		_spec.AddField(chargesetting.FieldMinChargeThreshold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.MinChargeTimeRangeStart(); ok {
		_spec.SetField(chargesetting.FieldMinChargeTimeRangeStart, field.TypeString, value)
	}
	if value, ok := csuo.mutation.MinChargeTimeRangeEnd(); ok {
		_spec.SetField(chargesetting.FieldMinChargeTimeRangeEnd, field.TypeString, value)
	}
	if value, ok := csuo.mutation.MinChargeAmperage(); ok {
		_spec.SetField(chargesetting.FieldMinChargeAmperage, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedMinChargeAmperage(); ok {
		_spec.AddField(chargesetting.FieldMinChargeAmperage, field.TypeInt, value)
	}
	_node = &ChargeSetting{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
