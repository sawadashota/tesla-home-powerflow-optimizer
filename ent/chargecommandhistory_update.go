// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargecommandhistory"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ChargeCommandHistoryUpdate is the builder for updating ChargeCommandHistory entities.
type ChargeCommandHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ChargeCommandHistoryMutation
}

// Where appends a list predicates to the ChargeCommandHistoryUpdate builder.
func (cchu *ChargeCommandHistoryUpdate) Where(ps ...predicate.ChargeCommandHistory) *ChargeCommandHistoryUpdate {
	cchu.mutation.Where(ps...)
	return cchu
}

// SetVin sets the "vin" field.
func (cchu *ChargeCommandHistoryUpdate) SetVin(s string) *ChargeCommandHistoryUpdate {
	cchu.mutation.SetVin(s)
	return cchu
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (cchu *ChargeCommandHistoryUpdate) SetNillableVin(s *string) *ChargeCommandHistoryUpdate {
	if s != nil {
		cchu.SetVin(*s)
	}
	return cchu
}

// SetOperation sets the "operation" field.
func (cchu *ChargeCommandHistoryUpdate) SetOperation(s string) *ChargeCommandHistoryUpdate {
	cchu.mutation.SetOperation(s)
	return cchu
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (cchu *ChargeCommandHistoryUpdate) SetNillableOperation(s *string) *ChargeCommandHistoryUpdate {
	if s != nil {
		cchu.SetOperation(*s)
	}
	return cchu
}

// SetAmps sets the "amps" field.
func (cchu *ChargeCommandHistoryUpdate) SetAmps(i int) *ChargeCommandHistoryUpdate {
	cchu.mutation.ResetAmps()
	cchu.mutation.SetAmps(i)
	return cchu
}

// SetNillableAmps sets the "amps" field if the given value is not nil.
func (cchu *ChargeCommandHistoryUpdate) SetNillableAmps(i *int) *ChargeCommandHistoryUpdate {
	if i != nil {
		cchu.SetAmps(*i)
	}
	return cchu
}

// AddAmps adds i to the "amps" field.
func (cchu *ChargeCommandHistoryUpdate) AddAmps(i int) *ChargeCommandHistoryUpdate {
	cchu.mutation.AddAmps(i)
	return cchu
}

// SetTimestamp sets the "timestamp" field.
func (cchu *ChargeCommandHistoryUpdate) SetTimestamp(t time.Time) *ChargeCommandHistoryUpdate {
	cchu.mutation.SetTimestamp(t)
	return cchu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cchu *ChargeCommandHistoryUpdate) SetNillableTimestamp(t *time.Time) *ChargeCommandHistoryUpdate {
	if t != nil {
		cchu.SetTimestamp(*t)
	}
	return cchu
}

// Mutation returns the ChargeCommandHistoryMutation object of the builder.
func (cchu *ChargeCommandHistoryUpdate) Mutation() *ChargeCommandHistoryMutation {
	return cchu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cchu *ChargeCommandHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cchu.sqlSave, cchu.mutation, cchu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cchu *ChargeCommandHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cchu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cchu *ChargeCommandHistoryUpdate) Exec(ctx context.Context) error {
	_, err := cchu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cchu *ChargeCommandHistoryUpdate) ExecX(ctx context.Context) {
	if err := cchu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cchu *ChargeCommandHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chargecommandhistory.Table, chargecommandhistory.Columns, sqlgraph.NewFieldSpec(chargecommandhistory.FieldID, field.TypeInt))
	if ps := cchu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cchu.mutation.Vin(); ok {
		_spec.SetField(chargecommandhistory.FieldVin, field.TypeString, value)
	}
	if value, ok := cchu.mutation.Operation(); ok {
		_spec.SetField(chargecommandhistory.FieldOperation, field.TypeString, value)
	}
	if value, ok := cchu.mutation.Amps(); ok {
		_spec.SetField(chargecommandhistory.FieldAmps, field.TypeInt, value)
	}
	if value, ok := cchu.mutation.AddedAmps(); ok {
		_spec.AddField(chargecommandhistory.FieldAmps, field.TypeInt, value)
	}
	if value, ok := cchu.mutation.Timestamp(); ok {
		_spec.SetField(chargecommandhistory.FieldTimestamp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cchu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargecommandhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cchu.mutation.done = true
	return n, nil
}

// ChargeCommandHistoryUpdateOne is the builder for updating a single ChargeCommandHistory entity.
type ChargeCommandHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChargeCommandHistoryMutation
}

// SetVin sets the "vin" field.
func (cchuo *ChargeCommandHistoryUpdateOne) SetVin(s string) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.SetVin(s)
	return cchuo
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (cchuo *ChargeCommandHistoryUpdateOne) SetNillableVin(s *string) *ChargeCommandHistoryUpdateOne {
	if s != nil {
		cchuo.SetVin(*s)
	}
	return cchuo
}

// SetOperation sets the "operation" field.
func (cchuo *ChargeCommandHistoryUpdateOne) SetOperation(s string) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.SetOperation(s)
	return cchuo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (cchuo *ChargeCommandHistoryUpdateOne) SetNillableOperation(s *string) *ChargeCommandHistoryUpdateOne {
	if s != nil {
		cchuo.SetOperation(*s)
	}
	return cchuo
}

// SetAmps sets the "amps" field.
func (cchuo *ChargeCommandHistoryUpdateOne) SetAmps(i int) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.ResetAmps()
	cchuo.mutation.SetAmps(i)
	return cchuo
}

// SetNillableAmps sets the "amps" field if the given value is not nil.
func (cchuo *ChargeCommandHistoryUpdateOne) SetNillableAmps(i *int) *ChargeCommandHistoryUpdateOne {
	if i != nil {
		cchuo.SetAmps(*i)
	}
	return cchuo
}

// AddAmps adds i to the "amps" field.
func (cchuo *ChargeCommandHistoryUpdateOne) AddAmps(i int) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.AddAmps(i)
	return cchuo
}

// SetTimestamp sets the "timestamp" field.
func (cchuo *ChargeCommandHistoryUpdateOne) SetTimestamp(t time.Time) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.SetTimestamp(t)
	return cchuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cchuo *ChargeCommandHistoryUpdateOne) SetNillableTimestamp(t *time.Time) *ChargeCommandHistoryUpdateOne {
	if t != nil {
		cchuo.SetTimestamp(*t)
	}
	return cchuo
}

// Mutation returns the ChargeCommandHistoryMutation object of the builder.
func (cchuo *ChargeCommandHistoryUpdateOne) Mutation() *ChargeCommandHistoryMutation {
	return cchuo.mutation
}

// Where appends a list predicates to the ChargeCommandHistoryUpdate builder.
func (cchuo *ChargeCommandHistoryUpdateOne) Where(ps ...predicate.ChargeCommandHistory) *ChargeCommandHistoryUpdateOne {
	cchuo.mutation.Where(ps...)
	return cchuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cchuo *ChargeCommandHistoryUpdateOne) Select(field string, fields ...string) *ChargeCommandHistoryUpdateOne {
	cchuo.fields = append([]string{field}, fields...)
	return cchuo
}

// Save executes the query and returns the updated ChargeCommandHistory entity.
func (cchuo *ChargeCommandHistoryUpdateOne) Save(ctx context.Context) (*ChargeCommandHistory, error) {
	return withHooks(ctx, cchuo.sqlSave, cchuo.mutation, cchuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cchuo *ChargeCommandHistoryUpdateOne) SaveX(ctx context.Context) *ChargeCommandHistory {
	node, err := cchuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cchuo *ChargeCommandHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cchuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cchuo *ChargeCommandHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := cchuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cchuo *ChargeCommandHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ChargeCommandHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(chargecommandhistory.Table, chargecommandhistory.Columns, sqlgraph.NewFieldSpec(chargecommandhistory.FieldID, field.TypeInt))
	id, ok := cchuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChargeCommandHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cchuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chargecommandhistory.FieldID)
		for _, f := range fields {
			if !chargecommandhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chargecommandhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cchuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cchuo.mutation.Vin(); ok {
		_spec.SetField(chargecommandhistory.FieldVin, field.TypeString, value)
	}
	if value, ok := cchuo.mutation.Operation(); ok {
		_spec.SetField(chargecommandhistory.FieldOperation, field.TypeString, value)
	}
	if value, ok := cchuo.mutation.Amps(); ok {
		_spec.SetField(chargecommandhistory.FieldAmps, field.TypeInt, value)
	}
	if value, ok := cchuo.mutation.AddedAmps(); ok {
		_spec.AddField(chargecommandhistory.FieldAmps, field.TypeInt, value)
	}
	if value, ok := cchuo.mutation.Timestamp(); ok {
		_spec.SetField(chargecommandhistory.FieldTimestamp, field.TypeTime, value)
	}
	_node = &ChargeCommandHistory{config: cchuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cchuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargecommandhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cchuo.mutation.done = true
	return _node, nil
}
