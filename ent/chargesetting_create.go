// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargesetting"
)

// ChargeSettingCreate is the builder for creating a ChargeSetting entity.
type ChargeSettingCreate struct {
	config
	mutation *ChargeSettingMutation
	hooks    []Hook
}

// SetEnabled sets the "enabled" field.
func (csc *ChargeSettingCreate) SetEnabled(b bool) *ChargeSettingCreate {
	csc.mutation.SetEnabled(b)
	return csc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (csc *ChargeSettingCreate) SetNillableEnabled(b *bool) *ChargeSettingCreate {
	if b != nil {
		csc.SetEnabled(*b)
	}
	return csc
}

// SetChargeStartThreshold sets the "charge_start_threshold" field.
func (csc *ChargeSettingCreate) SetChargeStartThreshold(i int) *ChargeSettingCreate {
	csc.mutation.SetChargeStartThreshold(i)
	return csc
}

// SetPowerUsageIncreaseThreshold sets the "power_usage_increase_threshold" field.
func (csc *ChargeSettingCreate) SetPowerUsageIncreaseThreshold(i int) *ChargeSettingCreate {
	csc.mutation.SetPowerUsageIncreaseThreshold(i)
	return csc
}

// SetPowerUsageDecreaseThreshold sets the "power_usage_decrease_threshold" field.
func (csc *ChargeSettingCreate) SetPowerUsageDecreaseThreshold(i int) *ChargeSettingCreate {
	csc.mutation.SetPowerUsageDecreaseThreshold(i)
	return csc
}

// SetUpdateInterval sets the "update_interval" field.
func (csc *ChargeSettingCreate) SetUpdateInterval(i int) *ChargeSettingCreate {
	csc.mutation.SetUpdateInterval(i)
	return csc
}

// Mutation returns the ChargeSettingMutation object of the builder.
func (csc *ChargeSettingCreate) Mutation() *ChargeSettingMutation {
	return csc.mutation
}

// Save creates the ChargeSetting in the database.
func (csc *ChargeSettingCreate) Save(ctx context.Context) (*ChargeSetting, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ChargeSettingCreate) SaveX(ctx context.Context) *ChargeSetting {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ChargeSettingCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ChargeSettingCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ChargeSettingCreate) defaults() {
	if _, ok := csc.mutation.Enabled(); !ok {
		v := chargesetting.DefaultEnabled
		csc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ChargeSettingCreate) check() error {
	if _, ok := csc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "ChargeSetting.enabled"`)}
	}
	if _, ok := csc.mutation.ChargeStartThreshold(); !ok {
		return &ValidationError{Name: "charge_start_threshold", err: errors.New(`ent: missing required field "ChargeSetting.charge_start_threshold"`)}
	}
	if _, ok := csc.mutation.PowerUsageIncreaseThreshold(); !ok {
		return &ValidationError{Name: "power_usage_increase_threshold", err: errors.New(`ent: missing required field "ChargeSetting.power_usage_increase_threshold"`)}
	}
	if _, ok := csc.mutation.PowerUsageDecreaseThreshold(); !ok {
		return &ValidationError{Name: "power_usage_decrease_threshold", err: errors.New(`ent: missing required field "ChargeSetting.power_usage_decrease_threshold"`)}
	}
	if _, ok := csc.mutation.UpdateInterval(); !ok {
		return &ValidationError{Name: "update_interval", err: errors.New(`ent: missing required field "ChargeSetting.update_interval"`)}
	}
	return nil
}

func (csc *ChargeSettingCreate) sqlSave(ctx context.Context) (*ChargeSetting, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ChargeSettingCreate) createSpec() (*ChargeSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ChargeSetting{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(chargesetting.Table, sqlgraph.NewFieldSpec(chargesetting.FieldID, field.TypeInt))
	)
	if value, ok := csc.mutation.Enabled(); ok {
		_spec.SetField(chargesetting.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := csc.mutation.ChargeStartThreshold(); ok {
		_spec.SetField(chargesetting.FieldChargeStartThreshold, field.TypeInt, value)
		_node.ChargeStartThreshold = value
	}
	if value, ok := csc.mutation.PowerUsageIncreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageIncreaseThreshold, field.TypeInt, value)
		_node.PowerUsageIncreaseThreshold = value
	}
	if value, ok := csc.mutation.PowerUsageDecreaseThreshold(); ok {
		_spec.SetField(chargesetting.FieldPowerUsageDecreaseThreshold, field.TypeInt, value)
		_node.PowerUsageDecreaseThreshold = value
	}
	if value, ok := csc.mutation.UpdateInterval(); ok {
		_spec.SetField(chargesetting.FieldUpdateInterval, field.TypeInt, value)
		_node.UpdateInterval = value
	}
	return _node, _spec
}

// ChargeSettingCreateBulk is the builder for creating many ChargeSetting entities in bulk.
type ChargeSettingCreateBulk struct {
	config
	err      error
	builders []*ChargeSettingCreate
}

// Save creates the ChargeSetting entities in the database.
func (cscb *ChargeSettingCreateBulk) Save(ctx context.Context) ([]*ChargeSetting, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ChargeSetting, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChargeSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ChargeSettingCreateBulk) SaveX(ctx context.Context) []*ChargeSetting {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ChargeSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ChargeSettingCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
