// Code generated by ent, DO NOT EDIT.

package chargesetting

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chargesetting type in the database.
	Label = "charge_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldChargeStartThreshold holds the string denoting the charge_start_threshold field in the database.
	FieldChargeStartThreshold = "charge_start_threshold"
	// FieldPowerUsageIncreaseThreshold holds the string denoting the power_usage_increase_threshold field in the database.
	FieldPowerUsageIncreaseThreshold = "power_usage_increase_threshold"
	// FieldPowerUsageDecreaseThreshold holds the string denoting the power_usage_decrease_threshold field in the database.
	FieldPowerUsageDecreaseThreshold = "power_usage_decrease_threshold"
	// FieldUpdateInterval holds the string denoting the update_interval field in the database.
	FieldUpdateInterval = "update_interval"
	// Table holds the table name of the chargesetting in the database.
	Table = "charge_settings"
)

// Columns holds all SQL columns for chargesetting fields.
var Columns = []string{
	FieldID,
	FieldEnabled,
	FieldChargeStartThreshold,
	FieldPowerUsageIncreaseThreshold,
	FieldPowerUsageDecreaseThreshold,
	FieldUpdateInterval,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
)

// OrderOption defines the ordering options for the ChargeSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByChargeStartThreshold orders the results by the charge_start_threshold field.
func ByChargeStartThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeStartThreshold, opts...).ToFunc()
}

// ByPowerUsageIncreaseThreshold orders the results by the power_usage_increase_threshold field.
func ByPowerUsageIncreaseThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerUsageIncreaseThreshold, opts...).ToFunc()
}

// ByPowerUsageDecreaseThreshold orders the results by the power_usage_decrease_threshold field.
func ByPowerUsageDecreaseThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerUsageDecreaseThreshold, opts...).ToFunc()
}

// ByUpdateInterval orders the results by the update_interval field.
func ByUpdateInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateInterval, opts...).ToFunc()
}
