// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/powermetric"
)

// PowerMetricCreate is the builder for creating a PowerMetric entity.
type PowerMetricCreate struct {
	config
	mutation *PowerMetricMutation
	hooks    []Hook
}

// SetSurplusWatt sets the "surplus_watt" field.
func (pmc *PowerMetricCreate) SetSurplusWatt(i int) *PowerMetricCreate {
	pmc.mutation.SetSurplusWatt(i)
	return pmc
}

// SetTimestamp sets the "timestamp" field.
func (pmc *PowerMetricCreate) SetTimestamp(t time.Time) *PowerMetricCreate {
	pmc.mutation.SetTimestamp(t)
	return pmc
}

// Mutation returns the PowerMetricMutation object of the builder.
func (pmc *PowerMetricCreate) Mutation() *PowerMetricMutation {
	return pmc.mutation
}

// Save creates the PowerMetric in the database.
func (pmc *PowerMetricCreate) Save(ctx context.Context) (*PowerMetric, error) {
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PowerMetricCreate) SaveX(ctx context.Context) *PowerMetric {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PowerMetricCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PowerMetricCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PowerMetricCreate) check() error {
	if _, ok := pmc.mutation.SurplusWatt(); !ok {
		return &ValidationError{Name: "surplus_watt", err: errors.New(`ent: missing required field "PowerMetric.surplus_watt"`)}
	}
	if _, ok := pmc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "PowerMetric.timestamp"`)}
	}
	return nil
}

func (pmc *PowerMetricCreate) sqlSave(ctx context.Context) (*PowerMetric, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PowerMetricCreate) createSpec() (*PowerMetric, *sqlgraph.CreateSpec) {
	var (
		_node = &PowerMetric{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(powermetric.Table, sqlgraph.NewFieldSpec(powermetric.FieldID, field.TypeInt))
	)
	if value, ok := pmc.mutation.SurplusWatt(); ok {
		_spec.SetField(powermetric.FieldSurplusWatt, field.TypeInt, value)
		_node.SurplusWatt = value
	}
	if value, ok := pmc.mutation.Timestamp(); ok {
		_spec.SetField(powermetric.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	return _node, _spec
}

// PowerMetricCreateBulk is the builder for creating many PowerMetric entities in bulk.
type PowerMetricCreateBulk struct {
	config
	err      error
	builders []*PowerMetricCreate
}

// Save creates the PowerMetric entities in the database.
func (pmcb *PowerMetricCreateBulk) Save(ctx context.Context) ([]*PowerMetric, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PowerMetric, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PowerMetricMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PowerMetricCreateBulk) SaveX(ctx context.Context) []*PowerMetric {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PowerMetricCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PowerMetricCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
