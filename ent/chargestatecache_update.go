// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargestatecache"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ChargeStateCacheUpdate is the builder for updating ChargeStateCache entities.
type ChargeStateCacheUpdate struct {
	config
	hooks    []Hook
	mutation *ChargeStateCacheMutation
}

// Where appends a list predicates to the ChargeStateCacheUpdate builder.
func (cscu *ChargeStateCacheUpdate) Where(ps ...predicate.ChargeStateCache) *ChargeStateCacheUpdate {
	cscu.mutation.Where(ps...)
	return cscu
}

// SetVin sets the "vin" field.
func (cscu *ChargeStateCacheUpdate) SetVin(s string) *ChargeStateCacheUpdate {
	cscu.mutation.SetVin(s)
	return cscu
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableVin(s *string) *ChargeStateCacheUpdate {
	if s != nil {
		cscu.SetVin(*s)
	}
	return cscu
}

// SetBatteryLevel sets the "battery_level" field.
func (cscu *ChargeStateCacheUpdate) SetBatteryLevel(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetBatteryLevel()
	cscu.mutation.SetBatteryLevel(i)
	return cscu
}

// SetNillableBatteryLevel sets the "battery_level" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableBatteryLevel(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetBatteryLevel(*i)
	}
	return cscu
}

// AddBatteryLevel adds i to the "battery_level" field.
func (cscu *ChargeStateCacheUpdate) AddBatteryLevel(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddBatteryLevel(i)
	return cscu
}

// SetBatteryRange sets the "battery_range" field.
func (cscu *ChargeStateCacheUpdate) SetBatteryRange(f float32) *ChargeStateCacheUpdate {
	cscu.mutation.ResetBatteryRange()
	cscu.mutation.SetBatteryRange(f)
	return cscu
}

// SetNillableBatteryRange sets the "battery_range" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableBatteryRange(f *float32) *ChargeStateCacheUpdate {
	if f != nil {
		cscu.SetBatteryRange(*f)
	}
	return cscu
}

// AddBatteryRange adds f to the "battery_range" field.
func (cscu *ChargeStateCacheUpdate) AddBatteryRange(f float32) *ChargeStateCacheUpdate {
	cscu.mutation.AddBatteryRange(f)
	return cscu
}

// SetChargeAmps sets the "charge_amps" field.
func (cscu *ChargeStateCacheUpdate) SetChargeAmps(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargeAmps()
	cscu.mutation.SetChargeAmps(i)
	return cscu
}

// SetNillableChargeAmps sets the "charge_amps" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargeAmps(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargeAmps(*i)
	}
	return cscu
}

// AddChargeAmps adds i to the "charge_amps" field.
func (cscu *ChargeStateCacheUpdate) AddChargeAmps(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargeAmps(i)
	return cscu
}

// SetChargeCurrentRequest sets the "charge_current_request" field.
func (cscu *ChargeStateCacheUpdate) SetChargeCurrentRequest(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargeCurrentRequest()
	cscu.mutation.SetChargeCurrentRequest(i)
	return cscu
}

// SetNillableChargeCurrentRequest sets the "charge_current_request" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargeCurrentRequest(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargeCurrentRequest(*i)
	}
	return cscu
}

// AddChargeCurrentRequest adds i to the "charge_current_request" field.
func (cscu *ChargeStateCacheUpdate) AddChargeCurrentRequest(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargeCurrentRequest(i)
	return cscu
}

// SetChargeCurrentRequestMax sets the "charge_current_request_max" field.
func (cscu *ChargeStateCacheUpdate) SetChargeCurrentRequestMax(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargeCurrentRequestMax()
	cscu.mutation.SetChargeCurrentRequestMax(i)
	return cscu
}

// SetNillableChargeCurrentRequestMax sets the "charge_current_request_max" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargeCurrentRequestMax(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargeCurrentRequestMax(*i)
	}
	return cscu
}

// AddChargeCurrentRequestMax adds i to the "charge_current_request_max" field.
func (cscu *ChargeStateCacheUpdate) AddChargeCurrentRequestMax(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargeCurrentRequestMax(i)
	return cscu
}

// SetChargeEnableRequest sets the "charge_enable_request" field.
func (cscu *ChargeStateCacheUpdate) SetChargeEnableRequest(b bool) *ChargeStateCacheUpdate {
	cscu.mutation.SetChargeEnableRequest(b)
	return cscu
}

// SetNillableChargeEnableRequest sets the "charge_enable_request" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargeEnableRequest(b *bool) *ChargeStateCacheUpdate {
	if b != nil {
		cscu.SetChargeEnableRequest(*b)
	}
	return cscu
}

// SetChargeLimitSoc sets the "charge_limit_soc" field.
func (cscu *ChargeStateCacheUpdate) SetChargeLimitSoc(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargeLimitSoc()
	cscu.mutation.SetChargeLimitSoc(i)
	return cscu
}

// SetNillableChargeLimitSoc sets the "charge_limit_soc" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargeLimitSoc(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargeLimitSoc(*i)
	}
	return cscu
}

// AddChargeLimitSoc adds i to the "charge_limit_soc" field.
func (cscu *ChargeStateCacheUpdate) AddChargeLimitSoc(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargeLimitSoc(i)
	return cscu
}

// SetChargePortDoorOpen sets the "charge_port_door_open" field.
func (cscu *ChargeStateCacheUpdate) SetChargePortDoorOpen(b bool) *ChargeStateCacheUpdate {
	cscu.mutation.SetChargePortDoorOpen(b)
	return cscu
}

// SetNillableChargePortDoorOpen sets the "charge_port_door_open" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargePortDoorOpen(b *bool) *ChargeStateCacheUpdate {
	if b != nil {
		cscu.SetChargePortDoorOpen(*b)
	}
	return cscu
}

// SetChargePortLatch sets the "charge_port_latch" field.
func (cscu *ChargeStateCacheUpdate) SetChargePortLatch(s string) *ChargeStateCacheUpdate {
	cscu.mutation.SetChargePortLatch(s)
	return cscu
}

// SetNillableChargePortLatch sets the "charge_port_latch" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargePortLatch(s *string) *ChargeStateCacheUpdate {
	if s != nil {
		cscu.SetChargePortLatch(*s)
	}
	return cscu
}

// SetChargerActualCurrent sets the "charger_actual_current" field.
func (cscu *ChargeStateCacheUpdate) SetChargerActualCurrent(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargerActualCurrent()
	cscu.mutation.SetChargerActualCurrent(i)
	return cscu
}

// SetNillableChargerActualCurrent sets the "charger_actual_current" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargerActualCurrent(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargerActualCurrent(*i)
	}
	return cscu
}

// AddChargerActualCurrent adds i to the "charger_actual_current" field.
func (cscu *ChargeStateCacheUpdate) AddChargerActualCurrent(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargerActualCurrent(i)
	return cscu
}

// SetChargerVoltage sets the "charger_voltage" field.
func (cscu *ChargeStateCacheUpdate) SetChargerVoltage(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetChargerVoltage()
	cscu.mutation.SetChargerVoltage(i)
	return cscu
}

// SetNillableChargerVoltage sets the "charger_voltage" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargerVoltage(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetChargerVoltage(*i)
	}
	return cscu
}

// AddChargerVoltage adds i to the "charger_voltage" field.
func (cscu *ChargeStateCacheUpdate) AddChargerVoltage(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddChargerVoltage(i)
	return cscu
}

// SetChargingState sets the "charging_state" field.
func (cscu *ChargeStateCacheUpdate) SetChargingState(s string) *ChargeStateCacheUpdate {
	cscu.mutation.SetChargingState(s)
	return cscu
}

// SetNillableChargingState sets the "charging_state" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableChargingState(s *string) *ChargeStateCacheUpdate {
	if s != nil {
		cscu.SetChargingState(*s)
	}
	return cscu
}

// SetMinutesToFullCharge sets the "minutes_to_full_charge" field.
func (cscu *ChargeStateCacheUpdate) SetMinutesToFullCharge(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetMinutesToFullCharge()
	cscu.mutation.SetMinutesToFullCharge(i)
	return cscu
}

// SetNillableMinutesToFullCharge sets the "minutes_to_full_charge" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableMinutesToFullCharge(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetMinutesToFullCharge(*i)
	}
	return cscu
}

// AddMinutesToFullCharge adds i to the "minutes_to_full_charge" field.
func (cscu *ChargeStateCacheUpdate) AddMinutesToFullCharge(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddMinutesToFullCharge(i)
	return cscu
}

// SetTimestamp sets the "timestamp" field.
func (cscu *ChargeStateCacheUpdate) SetTimestamp(t time.Time) *ChargeStateCacheUpdate {
	cscu.mutation.SetTimestamp(t)
	return cscu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableTimestamp(t *time.Time) *ChargeStateCacheUpdate {
	if t != nil {
		cscu.SetTimestamp(*t)
	}
	return cscu
}

// SetUsableBatteryLevel sets the "usable_battery_level" field.
func (cscu *ChargeStateCacheUpdate) SetUsableBatteryLevel(i int) *ChargeStateCacheUpdate {
	cscu.mutation.ResetUsableBatteryLevel()
	cscu.mutation.SetUsableBatteryLevel(i)
	return cscu
}

// SetNillableUsableBatteryLevel sets the "usable_battery_level" field if the given value is not nil.
func (cscu *ChargeStateCacheUpdate) SetNillableUsableBatteryLevel(i *int) *ChargeStateCacheUpdate {
	if i != nil {
		cscu.SetUsableBatteryLevel(*i)
	}
	return cscu
}

// AddUsableBatteryLevel adds i to the "usable_battery_level" field.
func (cscu *ChargeStateCacheUpdate) AddUsableBatteryLevel(i int) *ChargeStateCacheUpdate {
	cscu.mutation.AddUsableBatteryLevel(i)
	return cscu
}

// Mutation returns the ChargeStateCacheMutation object of the builder.
func (cscu *ChargeStateCacheUpdate) Mutation() *ChargeStateCacheMutation {
	return cscu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cscu *ChargeStateCacheUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cscu.sqlSave, cscu.mutation, cscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cscu *ChargeStateCacheUpdate) SaveX(ctx context.Context) int {
	affected, err := cscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cscu *ChargeStateCacheUpdate) Exec(ctx context.Context) error {
	_, err := cscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscu *ChargeStateCacheUpdate) ExecX(ctx context.Context) {
	if err := cscu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cscu *ChargeStateCacheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chargestatecache.Table, chargestatecache.Columns, sqlgraph.NewFieldSpec(chargestatecache.FieldID, field.TypeInt))
	if ps := cscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cscu.mutation.Vin(); ok {
		_spec.SetField(chargestatecache.FieldVin, field.TypeString, value)
	}
	if value, ok := cscu.mutation.BatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedBatteryLevel(); ok {
		_spec.AddField(chargestatecache.FieldBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.BatteryRange(); ok {
		_spec.SetField(chargestatecache.FieldBatteryRange, field.TypeFloat32, value)
	}
	if value, ok := cscu.mutation.AddedBatteryRange(); ok {
		_spec.AddField(chargestatecache.FieldBatteryRange, field.TypeFloat32, value)
	}
	if value, ok := cscu.mutation.ChargeAmps(); ok {
		_spec.SetField(chargestatecache.FieldChargeAmps, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargeAmps(); ok {
		_spec.AddField(chargestatecache.FieldChargeAmps, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargeCurrentRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequest, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargeCurrentRequest(); ok {
		_spec.AddField(chargestatecache.FieldChargeCurrentRequest, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargeCurrentRequestMax(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequestMax, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargeCurrentRequestMax(); ok {
		_spec.AddField(chargestatecache.FieldChargeCurrentRequestMax, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargeEnableRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeEnableRequest, field.TypeBool, value)
	}
	if value, ok := cscu.mutation.ChargeLimitSoc(); ok {
		_spec.SetField(chargestatecache.FieldChargeLimitSoc, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargeLimitSoc(); ok {
		_spec.AddField(chargestatecache.FieldChargeLimitSoc, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargePortDoorOpen(); ok {
		_spec.SetField(chargestatecache.FieldChargePortDoorOpen, field.TypeBool, value)
	}
	if value, ok := cscu.mutation.ChargePortLatch(); ok {
		_spec.SetField(chargestatecache.FieldChargePortLatch, field.TypeString, value)
	}
	if value, ok := cscu.mutation.ChargerActualCurrent(); ok {
		_spec.SetField(chargestatecache.FieldChargerActualCurrent, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargerActualCurrent(); ok {
		_spec.AddField(chargestatecache.FieldChargerActualCurrent, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargerVoltage(); ok {
		_spec.SetField(chargestatecache.FieldChargerVoltage, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedChargerVoltage(); ok {
		_spec.AddField(chargestatecache.FieldChargerVoltage, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.ChargingState(); ok {
		_spec.SetField(chargestatecache.FieldChargingState, field.TypeString, value)
	}
	if value, ok := cscu.mutation.MinutesToFullCharge(); ok {
		_spec.SetField(chargestatecache.FieldMinutesToFullCharge, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedMinutesToFullCharge(); ok {
		_spec.AddField(chargestatecache.FieldMinutesToFullCharge, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.Timestamp(); ok {
		_spec.SetField(chargestatecache.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := cscu.mutation.UsableBatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldUsableBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscu.mutation.AddedUsableBatteryLevel(); ok {
		_spec.AddField(chargestatecache.FieldUsableBatteryLevel, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargestatecache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cscu.mutation.done = true
	return n, nil
}

// ChargeStateCacheUpdateOne is the builder for updating a single ChargeStateCache entity.
type ChargeStateCacheUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChargeStateCacheMutation
}

// SetVin sets the "vin" field.
func (cscuo *ChargeStateCacheUpdateOne) SetVin(s string) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetVin(s)
	return cscuo
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableVin(s *string) *ChargeStateCacheUpdateOne {
	if s != nil {
		cscuo.SetVin(*s)
	}
	return cscuo
}

// SetBatteryLevel sets the "battery_level" field.
func (cscuo *ChargeStateCacheUpdateOne) SetBatteryLevel(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetBatteryLevel()
	cscuo.mutation.SetBatteryLevel(i)
	return cscuo
}

// SetNillableBatteryLevel sets the "battery_level" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableBatteryLevel(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetBatteryLevel(*i)
	}
	return cscuo
}

// AddBatteryLevel adds i to the "battery_level" field.
func (cscuo *ChargeStateCacheUpdateOne) AddBatteryLevel(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddBatteryLevel(i)
	return cscuo
}

// SetBatteryRange sets the "battery_range" field.
func (cscuo *ChargeStateCacheUpdateOne) SetBatteryRange(f float32) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetBatteryRange()
	cscuo.mutation.SetBatteryRange(f)
	return cscuo
}

// SetNillableBatteryRange sets the "battery_range" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableBatteryRange(f *float32) *ChargeStateCacheUpdateOne {
	if f != nil {
		cscuo.SetBatteryRange(*f)
	}
	return cscuo
}

// AddBatteryRange adds f to the "battery_range" field.
func (cscuo *ChargeStateCacheUpdateOne) AddBatteryRange(f float32) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddBatteryRange(f)
	return cscuo
}

// SetChargeAmps sets the "charge_amps" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargeAmps(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargeAmps()
	cscuo.mutation.SetChargeAmps(i)
	return cscuo
}

// SetNillableChargeAmps sets the "charge_amps" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargeAmps(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargeAmps(*i)
	}
	return cscuo
}

// AddChargeAmps adds i to the "charge_amps" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargeAmps(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargeAmps(i)
	return cscuo
}

// SetChargeCurrentRequest sets the "charge_current_request" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargeCurrentRequest(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargeCurrentRequest()
	cscuo.mutation.SetChargeCurrentRequest(i)
	return cscuo
}

// SetNillableChargeCurrentRequest sets the "charge_current_request" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargeCurrentRequest(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargeCurrentRequest(*i)
	}
	return cscuo
}

// AddChargeCurrentRequest adds i to the "charge_current_request" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargeCurrentRequest(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargeCurrentRequest(i)
	return cscuo
}

// SetChargeCurrentRequestMax sets the "charge_current_request_max" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargeCurrentRequestMax(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargeCurrentRequestMax()
	cscuo.mutation.SetChargeCurrentRequestMax(i)
	return cscuo
}

// SetNillableChargeCurrentRequestMax sets the "charge_current_request_max" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargeCurrentRequestMax(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargeCurrentRequestMax(*i)
	}
	return cscuo
}

// AddChargeCurrentRequestMax adds i to the "charge_current_request_max" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargeCurrentRequestMax(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargeCurrentRequestMax(i)
	return cscuo
}

// SetChargeEnableRequest sets the "charge_enable_request" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargeEnableRequest(b bool) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetChargeEnableRequest(b)
	return cscuo
}

// SetNillableChargeEnableRequest sets the "charge_enable_request" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargeEnableRequest(b *bool) *ChargeStateCacheUpdateOne {
	if b != nil {
		cscuo.SetChargeEnableRequest(*b)
	}
	return cscuo
}

// SetChargeLimitSoc sets the "charge_limit_soc" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargeLimitSoc(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargeLimitSoc()
	cscuo.mutation.SetChargeLimitSoc(i)
	return cscuo
}

// SetNillableChargeLimitSoc sets the "charge_limit_soc" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargeLimitSoc(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargeLimitSoc(*i)
	}
	return cscuo
}

// AddChargeLimitSoc adds i to the "charge_limit_soc" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargeLimitSoc(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargeLimitSoc(i)
	return cscuo
}

// SetChargePortDoorOpen sets the "charge_port_door_open" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargePortDoorOpen(b bool) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetChargePortDoorOpen(b)
	return cscuo
}

// SetNillableChargePortDoorOpen sets the "charge_port_door_open" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargePortDoorOpen(b *bool) *ChargeStateCacheUpdateOne {
	if b != nil {
		cscuo.SetChargePortDoorOpen(*b)
	}
	return cscuo
}

// SetChargePortLatch sets the "charge_port_latch" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargePortLatch(s string) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetChargePortLatch(s)
	return cscuo
}

// SetNillableChargePortLatch sets the "charge_port_latch" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargePortLatch(s *string) *ChargeStateCacheUpdateOne {
	if s != nil {
		cscuo.SetChargePortLatch(*s)
	}
	return cscuo
}

// SetChargerActualCurrent sets the "charger_actual_current" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargerActualCurrent(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargerActualCurrent()
	cscuo.mutation.SetChargerActualCurrent(i)
	return cscuo
}

// SetNillableChargerActualCurrent sets the "charger_actual_current" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargerActualCurrent(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargerActualCurrent(*i)
	}
	return cscuo
}

// AddChargerActualCurrent adds i to the "charger_actual_current" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargerActualCurrent(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargerActualCurrent(i)
	return cscuo
}

// SetChargerVoltage sets the "charger_voltage" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargerVoltage(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetChargerVoltage()
	cscuo.mutation.SetChargerVoltage(i)
	return cscuo
}

// SetNillableChargerVoltage sets the "charger_voltage" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargerVoltage(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetChargerVoltage(*i)
	}
	return cscuo
}

// AddChargerVoltage adds i to the "charger_voltage" field.
func (cscuo *ChargeStateCacheUpdateOne) AddChargerVoltage(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddChargerVoltage(i)
	return cscuo
}

// SetChargingState sets the "charging_state" field.
func (cscuo *ChargeStateCacheUpdateOne) SetChargingState(s string) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetChargingState(s)
	return cscuo
}

// SetNillableChargingState sets the "charging_state" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableChargingState(s *string) *ChargeStateCacheUpdateOne {
	if s != nil {
		cscuo.SetChargingState(*s)
	}
	return cscuo
}

// SetMinutesToFullCharge sets the "minutes_to_full_charge" field.
func (cscuo *ChargeStateCacheUpdateOne) SetMinutesToFullCharge(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetMinutesToFullCharge()
	cscuo.mutation.SetMinutesToFullCharge(i)
	return cscuo
}

// SetNillableMinutesToFullCharge sets the "minutes_to_full_charge" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableMinutesToFullCharge(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetMinutesToFullCharge(*i)
	}
	return cscuo
}

// AddMinutesToFullCharge adds i to the "minutes_to_full_charge" field.
func (cscuo *ChargeStateCacheUpdateOne) AddMinutesToFullCharge(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddMinutesToFullCharge(i)
	return cscuo
}

// SetTimestamp sets the "timestamp" field.
func (cscuo *ChargeStateCacheUpdateOne) SetTimestamp(t time.Time) *ChargeStateCacheUpdateOne {
	cscuo.mutation.SetTimestamp(t)
	return cscuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableTimestamp(t *time.Time) *ChargeStateCacheUpdateOne {
	if t != nil {
		cscuo.SetTimestamp(*t)
	}
	return cscuo
}

// SetUsableBatteryLevel sets the "usable_battery_level" field.
func (cscuo *ChargeStateCacheUpdateOne) SetUsableBatteryLevel(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.ResetUsableBatteryLevel()
	cscuo.mutation.SetUsableBatteryLevel(i)
	return cscuo
}

// SetNillableUsableBatteryLevel sets the "usable_battery_level" field if the given value is not nil.
func (cscuo *ChargeStateCacheUpdateOne) SetNillableUsableBatteryLevel(i *int) *ChargeStateCacheUpdateOne {
	if i != nil {
		cscuo.SetUsableBatteryLevel(*i)
	}
	return cscuo
}

// AddUsableBatteryLevel adds i to the "usable_battery_level" field.
func (cscuo *ChargeStateCacheUpdateOne) AddUsableBatteryLevel(i int) *ChargeStateCacheUpdateOne {
	cscuo.mutation.AddUsableBatteryLevel(i)
	return cscuo
}

// Mutation returns the ChargeStateCacheMutation object of the builder.
func (cscuo *ChargeStateCacheUpdateOne) Mutation() *ChargeStateCacheMutation {
	return cscuo.mutation
}

// Where appends a list predicates to the ChargeStateCacheUpdate builder.
func (cscuo *ChargeStateCacheUpdateOne) Where(ps ...predicate.ChargeStateCache) *ChargeStateCacheUpdateOne {
	cscuo.mutation.Where(ps...)
	return cscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cscuo *ChargeStateCacheUpdateOne) Select(field string, fields ...string) *ChargeStateCacheUpdateOne {
	cscuo.fields = append([]string{field}, fields...)
	return cscuo
}

// Save executes the query and returns the updated ChargeStateCache entity.
func (cscuo *ChargeStateCacheUpdateOne) Save(ctx context.Context) (*ChargeStateCache, error) {
	return withHooks(ctx, cscuo.sqlSave, cscuo.mutation, cscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cscuo *ChargeStateCacheUpdateOne) SaveX(ctx context.Context) *ChargeStateCache {
	node, err := cscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cscuo *ChargeStateCacheUpdateOne) Exec(ctx context.Context) error {
	_, err := cscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscuo *ChargeStateCacheUpdateOne) ExecX(ctx context.Context) {
	if err := cscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cscuo *ChargeStateCacheUpdateOne) sqlSave(ctx context.Context) (_node *ChargeStateCache, err error) {
	_spec := sqlgraph.NewUpdateSpec(chargestatecache.Table, chargestatecache.Columns, sqlgraph.NewFieldSpec(chargestatecache.FieldID, field.TypeInt))
	id, ok := cscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChargeStateCache.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chargestatecache.FieldID)
		for _, f := range fields {
			if !chargestatecache.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chargestatecache.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cscuo.mutation.Vin(); ok {
		_spec.SetField(chargestatecache.FieldVin, field.TypeString, value)
	}
	if value, ok := cscuo.mutation.BatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedBatteryLevel(); ok {
		_spec.AddField(chargestatecache.FieldBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.BatteryRange(); ok {
		_spec.SetField(chargestatecache.FieldBatteryRange, field.TypeFloat32, value)
	}
	if value, ok := cscuo.mutation.AddedBatteryRange(); ok {
		_spec.AddField(chargestatecache.FieldBatteryRange, field.TypeFloat32, value)
	}
	if value, ok := cscuo.mutation.ChargeAmps(); ok {
		_spec.SetField(chargestatecache.FieldChargeAmps, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargeAmps(); ok {
		_spec.AddField(chargestatecache.FieldChargeAmps, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargeCurrentRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequest, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargeCurrentRequest(); ok {
		_spec.AddField(chargestatecache.FieldChargeCurrentRequest, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargeCurrentRequestMax(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequestMax, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargeCurrentRequestMax(); ok {
		_spec.AddField(chargestatecache.FieldChargeCurrentRequestMax, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargeEnableRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeEnableRequest, field.TypeBool, value)
	}
	if value, ok := cscuo.mutation.ChargeLimitSoc(); ok {
		_spec.SetField(chargestatecache.FieldChargeLimitSoc, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargeLimitSoc(); ok {
		_spec.AddField(chargestatecache.FieldChargeLimitSoc, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargePortDoorOpen(); ok {
		_spec.SetField(chargestatecache.FieldChargePortDoorOpen, field.TypeBool, value)
	}
	if value, ok := cscuo.mutation.ChargePortLatch(); ok {
		_spec.SetField(chargestatecache.FieldChargePortLatch, field.TypeString, value)
	}
	if value, ok := cscuo.mutation.ChargerActualCurrent(); ok {
		_spec.SetField(chargestatecache.FieldChargerActualCurrent, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargerActualCurrent(); ok {
		_spec.AddField(chargestatecache.FieldChargerActualCurrent, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargerVoltage(); ok {
		_spec.SetField(chargestatecache.FieldChargerVoltage, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedChargerVoltage(); ok {
		_spec.AddField(chargestatecache.FieldChargerVoltage, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.ChargingState(); ok {
		_spec.SetField(chargestatecache.FieldChargingState, field.TypeString, value)
	}
	if value, ok := cscuo.mutation.MinutesToFullCharge(); ok {
		_spec.SetField(chargestatecache.FieldMinutesToFullCharge, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedMinutesToFullCharge(); ok {
		_spec.AddField(chargestatecache.FieldMinutesToFullCharge, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.Timestamp(); ok {
		_spec.SetField(chargestatecache.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := cscuo.mutation.UsableBatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldUsableBatteryLevel, field.TypeInt, value)
	}
	if value, ok := cscuo.mutation.AddedUsableBatteryLevel(); ok {
		_spec.AddField(chargestatecache.FieldUsableBatteryLevel, field.TypeInt, value)
	}
	_node = &ChargeStateCache{config: cscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chargestatecache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cscuo.mutation.done = true
	return _node, nil
}
