// Code generated by ent, DO NOT EDIT.

package chargestatecache

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chargestatecache type in the database.
	Label = "charge_state_cache"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVin holds the string denoting the vin field in the database.
	FieldVin = "vin"
	// FieldBatteryLevel holds the string denoting the battery_level field in the database.
	FieldBatteryLevel = "battery_level"
	// FieldBatteryRange holds the string denoting the battery_range field in the database.
	FieldBatteryRange = "battery_range"
	// FieldChargeAmps holds the string denoting the charge_amps field in the database.
	FieldChargeAmps = "charge_amps"
	// FieldChargeCurrentRequest holds the string denoting the charge_current_request field in the database.
	FieldChargeCurrentRequest = "charge_current_request"
	// FieldChargeCurrentRequestMax holds the string denoting the charge_current_request_max field in the database.
	FieldChargeCurrentRequestMax = "charge_current_request_max"
	// FieldChargeEnableRequest holds the string denoting the charge_enable_request field in the database.
	FieldChargeEnableRequest = "charge_enable_request"
	// FieldChargeLimitSoc holds the string denoting the charge_limit_soc field in the database.
	FieldChargeLimitSoc = "charge_limit_soc"
	// FieldChargePortDoorOpen holds the string denoting the charge_port_door_open field in the database.
	FieldChargePortDoorOpen = "charge_port_door_open"
	// FieldChargePortLatch holds the string denoting the charge_port_latch field in the database.
	FieldChargePortLatch = "charge_port_latch"
	// FieldChargerActualCurrent holds the string denoting the charger_actual_current field in the database.
	FieldChargerActualCurrent = "charger_actual_current"
	// FieldChargerVoltage holds the string denoting the charger_voltage field in the database.
	FieldChargerVoltage = "charger_voltage"
	// FieldChargingState holds the string denoting the charging_state field in the database.
	FieldChargingState = "charging_state"
	// FieldMinutesToFullCharge holds the string denoting the minutes_to_full_charge field in the database.
	FieldMinutesToFullCharge = "minutes_to_full_charge"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldUsableBatteryLevel holds the string denoting the usable_battery_level field in the database.
	FieldUsableBatteryLevel = "usable_battery_level"
	// Table holds the table name of the chargestatecache in the database.
	Table = "charge_state_caches"
)

// Columns holds all SQL columns for chargestatecache fields.
var Columns = []string{
	FieldID,
	FieldVin,
	FieldBatteryLevel,
	FieldBatteryRange,
	FieldChargeAmps,
	FieldChargeCurrentRequest,
	FieldChargeCurrentRequestMax,
	FieldChargeEnableRequest,
	FieldChargeLimitSoc,
	FieldChargePortDoorOpen,
	FieldChargePortLatch,
	FieldChargerActualCurrent,
	FieldChargerVoltage,
	FieldChargingState,
	FieldMinutesToFullCharge,
	FieldTimestamp,
	FieldUsableBatteryLevel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ChargeStateCache queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVin orders the results by the vin field.
func ByVin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVin, opts...).ToFunc()
}

// ByBatteryLevel orders the results by the battery_level field.
func ByBatteryLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryLevel, opts...).ToFunc()
}

// ByBatteryRange orders the results by the battery_range field.
func ByBatteryRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryRange, opts...).ToFunc()
}

// ByChargeAmps orders the results by the charge_amps field.
func ByChargeAmps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeAmps, opts...).ToFunc()
}

// ByChargeCurrentRequest orders the results by the charge_current_request field.
func ByChargeCurrentRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeCurrentRequest, opts...).ToFunc()
}

// ByChargeCurrentRequestMax orders the results by the charge_current_request_max field.
func ByChargeCurrentRequestMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeCurrentRequestMax, opts...).ToFunc()
}

// ByChargeEnableRequest orders the results by the charge_enable_request field.
func ByChargeEnableRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeEnableRequest, opts...).ToFunc()
}

// ByChargeLimitSoc orders the results by the charge_limit_soc field.
func ByChargeLimitSoc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeLimitSoc, opts...).ToFunc()
}

// ByChargePortDoorOpen orders the results by the charge_port_door_open field.
func ByChargePortDoorOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargePortDoorOpen, opts...).ToFunc()
}

// ByChargePortLatch orders the results by the charge_port_latch field.
func ByChargePortLatch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargePortLatch, opts...).ToFunc()
}

// ByChargerActualCurrent orders the results by the charger_actual_current field.
func ByChargerActualCurrent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargerActualCurrent, opts...).ToFunc()
}

// ByChargerVoltage orders the results by the charger_voltage field.
func ByChargerVoltage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargerVoltage, opts...).ToFunc()
}

// ByChargingState orders the results by the charging_state field.
func ByChargingState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargingState, opts...).ToFunc()
}

// ByMinutesToFullCharge orders the results by the minutes_to_full_charge field.
func ByMinutesToFullCharge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutesToFullCharge, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByUsableBatteryLevel orders the results by the usable_battery_level field.
func ByUsableBatteryLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsableBatteryLevel, opts...).ToFunc()
}
