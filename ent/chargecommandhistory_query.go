// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargecommandhistory"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// ChargeCommandHistoryQuery is the builder for querying ChargeCommandHistory entities.
type ChargeCommandHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []chargecommandhistory.OrderOption
	inters     []Interceptor
	predicates []predicate.ChargeCommandHistory
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChargeCommandHistoryQuery builder.
func (cchq *ChargeCommandHistoryQuery) Where(ps ...predicate.ChargeCommandHistory) *ChargeCommandHistoryQuery {
	cchq.predicates = append(cchq.predicates, ps...)
	return cchq
}

// Limit the number of records to be returned by this query.
func (cchq *ChargeCommandHistoryQuery) Limit(limit int) *ChargeCommandHistoryQuery {
	cchq.ctx.Limit = &limit
	return cchq
}

// Offset to start from.
func (cchq *ChargeCommandHistoryQuery) Offset(offset int) *ChargeCommandHistoryQuery {
	cchq.ctx.Offset = &offset
	return cchq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cchq *ChargeCommandHistoryQuery) Unique(unique bool) *ChargeCommandHistoryQuery {
	cchq.ctx.Unique = &unique
	return cchq
}

// Order specifies how the records should be ordered.
func (cchq *ChargeCommandHistoryQuery) Order(o ...chargecommandhistory.OrderOption) *ChargeCommandHistoryQuery {
	cchq.order = append(cchq.order, o...)
	return cchq
}

// First returns the first ChargeCommandHistory entity from the query.
// Returns a *NotFoundError when no ChargeCommandHistory was found.
func (cchq *ChargeCommandHistoryQuery) First(ctx context.Context) (*ChargeCommandHistory, error) {
	nodes, err := cchq.Limit(1).All(setContextOp(ctx, cchq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chargecommandhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) FirstX(ctx context.Context) *ChargeCommandHistory {
	node, err := cchq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChargeCommandHistory ID from the query.
// Returns a *NotFoundError when no ChargeCommandHistory ID was found.
func (cchq *ChargeCommandHistoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cchq.Limit(1).IDs(setContextOp(ctx, cchq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chargecommandhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) FirstIDX(ctx context.Context) int {
	id, err := cchq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChargeCommandHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChargeCommandHistory entity is found.
// Returns a *NotFoundError when no ChargeCommandHistory entities are found.
func (cchq *ChargeCommandHistoryQuery) Only(ctx context.Context) (*ChargeCommandHistory, error) {
	nodes, err := cchq.Limit(2).All(setContextOp(ctx, cchq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chargecommandhistory.Label}
	default:
		return nil, &NotSingularError{chargecommandhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) OnlyX(ctx context.Context) *ChargeCommandHistory {
	node, err := cchq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChargeCommandHistory ID in the query.
// Returns a *NotSingularError when more than one ChargeCommandHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (cchq *ChargeCommandHistoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cchq.Limit(2).IDs(setContextOp(ctx, cchq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chargecommandhistory.Label}
	default:
		err = &NotSingularError{chargecommandhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := cchq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChargeCommandHistories.
func (cchq *ChargeCommandHistoryQuery) All(ctx context.Context) ([]*ChargeCommandHistory, error) {
	ctx = setContextOp(ctx, cchq.ctx, ent.OpQueryAll)
	if err := cchq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChargeCommandHistory, *ChargeCommandHistoryQuery]()
	return withInterceptors[[]*ChargeCommandHistory](ctx, cchq, qr, cchq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) AllX(ctx context.Context) []*ChargeCommandHistory {
	nodes, err := cchq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChargeCommandHistory IDs.
func (cchq *ChargeCommandHistoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cchq.ctx.Unique == nil && cchq.path != nil {
		cchq.Unique(true)
	}
	ctx = setContextOp(ctx, cchq.ctx, ent.OpQueryIDs)
	if err = cchq.Select(chargecommandhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) IDsX(ctx context.Context) []int {
	ids, err := cchq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cchq *ChargeCommandHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cchq.ctx, ent.OpQueryCount)
	if err := cchq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cchq, querierCount[*ChargeCommandHistoryQuery](), cchq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) CountX(ctx context.Context) int {
	count, err := cchq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cchq *ChargeCommandHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cchq.ctx, ent.OpQueryExist)
	switch _, err := cchq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cchq *ChargeCommandHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := cchq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChargeCommandHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cchq *ChargeCommandHistoryQuery) Clone() *ChargeCommandHistoryQuery {
	if cchq == nil {
		return nil
	}
	return &ChargeCommandHistoryQuery{
		config:     cchq.config,
		ctx:        cchq.ctx.Clone(),
		order:      append([]chargecommandhistory.OrderOption{}, cchq.order...),
		inters:     append([]Interceptor{}, cchq.inters...),
		predicates: append([]predicate.ChargeCommandHistory{}, cchq.predicates...),
		// clone intermediate query.
		sql:  cchq.sql.Clone(),
		path: cchq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Vin string `json:"vin,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChargeCommandHistory.Query().
//		GroupBy(chargecommandhistory.FieldVin).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cchq *ChargeCommandHistoryQuery) GroupBy(field string, fields ...string) *ChargeCommandHistoryGroupBy {
	cchq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChargeCommandHistoryGroupBy{build: cchq}
	grbuild.flds = &cchq.ctx.Fields
	grbuild.label = chargecommandhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Vin string `json:"vin,omitempty"`
//	}
//
//	client.ChargeCommandHistory.Query().
//		Select(chargecommandhistory.FieldVin).
//		Scan(ctx, &v)
func (cchq *ChargeCommandHistoryQuery) Select(fields ...string) *ChargeCommandHistorySelect {
	cchq.ctx.Fields = append(cchq.ctx.Fields, fields...)
	sbuild := &ChargeCommandHistorySelect{ChargeCommandHistoryQuery: cchq}
	sbuild.label = chargecommandhistory.Label
	sbuild.flds, sbuild.scan = &cchq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChargeCommandHistorySelect configured with the given aggregations.
func (cchq *ChargeCommandHistoryQuery) Aggregate(fns ...AggregateFunc) *ChargeCommandHistorySelect {
	return cchq.Select().Aggregate(fns...)
}

func (cchq *ChargeCommandHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cchq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cchq); err != nil {
				return err
			}
		}
	}
	for _, f := range cchq.ctx.Fields {
		if !chargecommandhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cchq.path != nil {
		prev, err := cchq.path(ctx)
		if err != nil {
			return err
		}
		cchq.sql = prev
	}
	return nil
}

func (cchq *ChargeCommandHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChargeCommandHistory, error) {
	var (
		nodes = []*ChargeCommandHistory{}
		_spec = cchq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChargeCommandHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChargeCommandHistory{config: cchq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cchq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cchq *ChargeCommandHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cchq.querySpec()
	_spec.Node.Columns = cchq.ctx.Fields
	if len(cchq.ctx.Fields) > 0 {
		_spec.Unique = cchq.ctx.Unique != nil && *cchq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cchq.driver, _spec)
}

func (cchq *ChargeCommandHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(chargecommandhistory.Table, chargecommandhistory.Columns, sqlgraph.NewFieldSpec(chargecommandhistory.FieldID, field.TypeInt))
	_spec.From = cchq.sql
	if unique := cchq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cchq.path != nil {
		_spec.Unique = true
	}
	if fields := cchq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chargecommandhistory.FieldID)
		for i := range fields {
			if fields[i] != chargecommandhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cchq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cchq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cchq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cchq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cchq *ChargeCommandHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cchq.driver.Dialect())
	t1 := builder.Table(chargecommandhistory.Table)
	columns := cchq.ctx.Fields
	if len(columns) == 0 {
		columns = chargecommandhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cchq.sql != nil {
		selector = cchq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cchq.ctx.Unique != nil && *cchq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cchq.predicates {
		p(selector)
	}
	for _, p := range cchq.order {
		p(selector)
	}
	if offset := cchq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cchq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ChargeCommandHistoryGroupBy is the group-by builder for ChargeCommandHistory entities.
type ChargeCommandHistoryGroupBy struct {
	selector
	build *ChargeCommandHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cchgb *ChargeCommandHistoryGroupBy) Aggregate(fns ...AggregateFunc) *ChargeCommandHistoryGroupBy {
	cchgb.fns = append(cchgb.fns, fns...)
	return cchgb
}

// Scan applies the selector query and scans the result into the given value.
func (cchgb *ChargeCommandHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cchgb.build.ctx, ent.OpQueryGroupBy)
	if err := cchgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChargeCommandHistoryQuery, *ChargeCommandHistoryGroupBy](ctx, cchgb.build, cchgb, cchgb.build.inters, v)
}

func (cchgb *ChargeCommandHistoryGroupBy) sqlScan(ctx context.Context, root *ChargeCommandHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cchgb.fns))
	for _, fn := range cchgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cchgb.flds)+len(cchgb.fns))
		for _, f := range *cchgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cchgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cchgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChargeCommandHistorySelect is the builder for selecting fields of ChargeCommandHistory entities.
type ChargeCommandHistorySelect struct {
	*ChargeCommandHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cchs *ChargeCommandHistorySelect) Aggregate(fns ...AggregateFunc) *ChargeCommandHistorySelect {
	cchs.fns = append(cchs.fns, fns...)
	return cchs
}

// Scan applies the selector query and scans the result into the given value.
func (cchs *ChargeCommandHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cchs.ctx, ent.OpQuerySelect)
	if err := cchs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChargeCommandHistoryQuery, *ChargeCommandHistorySelect](ctx, cchs.ChargeCommandHistoryQuery, cchs, cchs.inters, v)
}

func (cchs *ChargeCommandHistorySelect) sqlScan(ctx context.Context, root *ChargeCommandHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cchs.fns))
	for _, fn := range cchs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cchs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cchs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
