// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/grant"
)

// Grant is the model entity for the Grant schema.
type Grant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope string `json:"scope,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry       time.Time `json:"expiry,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			values[i] = new(sql.NullInt64)
		case grant.FieldSubject, grant.FieldAccessToken, grant.FieldRefreshToken, grant.FieldScope:
			values[i] = new(sql.NullString)
		case grant.FieldExpiry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grant fields.
func (gr *Grant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case grant.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				gr.Subject = value.String
			}
		case grant.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				gr.AccessToken = value.String
			}
		case grant.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				gr.RefreshToken = value.String
			}
		case grant.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				gr.Scope = value.String
			}
		case grant.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				gr.Expiry = value.Time
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Grant.
// This includes values selected through modifiers, order, etc.
func (gr *Grant) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// Update returns a builder for updating this Grant.
// Note that you need to call Grant.Unwrap() before calling this method if this Grant
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Grant) Update() *GrantUpdateOne {
	return NewGrantClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Grant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Grant) Unwrap() *Grant {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grant is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Grant) String() string {
	var builder strings.Builder
	builder.WriteString("Grant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("subject=")
	builder.WriteString(gr.Subject)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(gr.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(gr.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(gr.Scope)
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(gr.Expiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Grants is a parsable slice of Grant.
type Grants []*Grant
