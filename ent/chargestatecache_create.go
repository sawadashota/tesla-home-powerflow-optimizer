// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargestatecache"
)

// ChargeStateCacheCreate is the builder for creating a ChargeStateCache entity.
type ChargeStateCacheCreate struct {
	config
	mutation *ChargeStateCacheMutation
	hooks    []Hook
}

// SetVin sets the "vin" field.
func (cscc *ChargeStateCacheCreate) SetVin(s string) *ChargeStateCacheCreate {
	cscc.mutation.SetVin(s)
	return cscc
}

// SetBatteryLevel sets the "battery_level" field.
func (cscc *ChargeStateCacheCreate) SetBatteryLevel(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetBatteryLevel(i)
	return cscc
}

// SetBatteryRange sets the "battery_range" field.
func (cscc *ChargeStateCacheCreate) SetBatteryRange(f float32) *ChargeStateCacheCreate {
	cscc.mutation.SetBatteryRange(f)
	return cscc
}

// SetChargeAmps sets the "charge_amps" field.
func (cscc *ChargeStateCacheCreate) SetChargeAmps(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargeAmps(i)
	return cscc
}

// SetChargeCurrentRequest sets the "charge_current_request" field.
func (cscc *ChargeStateCacheCreate) SetChargeCurrentRequest(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargeCurrentRequest(i)
	return cscc
}

// SetChargeCurrentRequestMax sets the "charge_current_request_max" field.
func (cscc *ChargeStateCacheCreate) SetChargeCurrentRequestMax(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargeCurrentRequestMax(i)
	return cscc
}

// SetChargeEnableRequest sets the "charge_enable_request" field.
func (cscc *ChargeStateCacheCreate) SetChargeEnableRequest(b bool) *ChargeStateCacheCreate {
	cscc.mutation.SetChargeEnableRequest(b)
	return cscc
}

// SetChargeLimitSoc sets the "charge_limit_soc" field.
func (cscc *ChargeStateCacheCreate) SetChargeLimitSoc(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargeLimitSoc(i)
	return cscc
}

// SetChargePortDoorOpen sets the "charge_port_door_open" field.
func (cscc *ChargeStateCacheCreate) SetChargePortDoorOpen(b bool) *ChargeStateCacheCreate {
	cscc.mutation.SetChargePortDoorOpen(b)
	return cscc
}

// SetChargePortLatch sets the "charge_port_latch" field.
func (cscc *ChargeStateCacheCreate) SetChargePortLatch(s string) *ChargeStateCacheCreate {
	cscc.mutation.SetChargePortLatch(s)
	return cscc
}

// SetChargerActualCurrent sets the "charger_actual_current" field.
func (cscc *ChargeStateCacheCreate) SetChargerActualCurrent(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargerActualCurrent(i)
	return cscc
}

// SetChargerVoltage sets the "charger_voltage" field.
func (cscc *ChargeStateCacheCreate) SetChargerVoltage(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetChargerVoltage(i)
	return cscc
}

// SetChargingState sets the "charging_state" field.
func (cscc *ChargeStateCacheCreate) SetChargingState(s string) *ChargeStateCacheCreate {
	cscc.mutation.SetChargingState(s)
	return cscc
}

// SetMinutesToFullCharge sets the "minutes_to_full_charge" field.
func (cscc *ChargeStateCacheCreate) SetMinutesToFullCharge(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetMinutesToFullCharge(i)
	return cscc
}

// SetTimestamp sets the "timestamp" field.
func (cscc *ChargeStateCacheCreate) SetTimestamp(t time.Time) *ChargeStateCacheCreate {
	cscc.mutation.SetTimestamp(t)
	return cscc
}

// SetUsableBatteryLevel sets the "usable_battery_level" field.
func (cscc *ChargeStateCacheCreate) SetUsableBatteryLevel(i int) *ChargeStateCacheCreate {
	cscc.mutation.SetUsableBatteryLevel(i)
	return cscc
}

// Mutation returns the ChargeStateCacheMutation object of the builder.
func (cscc *ChargeStateCacheCreate) Mutation() *ChargeStateCacheMutation {
	return cscc.mutation
}

// Save creates the ChargeStateCache in the database.
func (cscc *ChargeStateCacheCreate) Save(ctx context.Context) (*ChargeStateCache, error) {
	return withHooks(ctx, cscc.sqlSave, cscc.mutation, cscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cscc *ChargeStateCacheCreate) SaveX(ctx context.Context) *ChargeStateCache {
	v, err := cscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscc *ChargeStateCacheCreate) Exec(ctx context.Context) error {
	_, err := cscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscc *ChargeStateCacheCreate) ExecX(ctx context.Context) {
	if err := cscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cscc *ChargeStateCacheCreate) check() error {
	if _, ok := cscc.mutation.Vin(); !ok {
		return &ValidationError{Name: "vin", err: errors.New(`ent: missing required field "ChargeStateCache.vin"`)}
	}
	if _, ok := cscc.mutation.BatteryLevel(); !ok {
		return &ValidationError{Name: "battery_level", err: errors.New(`ent: missing required field "ChargeStateCache.battery_level"`)}
	}
	if _, ok := cscc.mutation.BatteryRange(); !ok {
		return &ValidationError{Name: "battery_range", err: errors.New(`ent: missing required field "ChargeStateCache.battery_range"`)}
	}
	if _, ok := cscc.mutation.ChargeAmps(); !ok {
		return &ValidationError{Name: "charge_amps", err: errors.New(`ent: missing required field "ChargeStateCache.charge_amps"`)}
	}
	if _, ok := cscc.mutation.ChargeCurrentRequest(); !ok {
		return &ValidationError{Name: "charge_current_request", err: errors.New(`ent: missing required field "ChargeStateCache.charge_current_request"`)}
	}
	if _, ok := cscc.mutation.ChargeCurrentRequestMax(); !ok {
		return &ValidationError{Name: "charge_current_request_max", err: errors.New(`ent: missing required field "ChargeStateCache.charge_current_request_max"`)}
	}
	if _, ok := cscc.mutation.ChargeEnableRequest(); !ok {
		return &ValidationError{Name: "charge_enable_request", err: errors.New(`ent: missing required field "ChargeStateCache.charge_enable_request"`)}
	}
	if _, ok := cscc.mutation.ChargeLimitSoc(); !ok {
		return &ValidationError{Name: "charge_limit_soc", err: errors.New(`ent: missing required field "ChargeStateCache.charge_limit_soc"`)}
	}
	if _, ok := cscc.mutation.ChargePortDoorOpen(); !ok {
		return &ValidationError{Name: "charge_port_door_open", err: errors.New(`ent: missing required field "ChargeStateCache.charge_port_door_open"`)}
	}
	if _, ok := cscc.mutation.ChargePortLatch(); !ok {
		return &ValidationError{Name: "charge_port_latch", err: errors.New(`ent: missing required field "ChargeStateCache.charge_port_latch"`)}
	}
	if _, ok := cscc.mutation.ChargerActualCurrent(); !ok {
		return &ValidationError{Name: "charger_actual_current", err: errors.New(`ent: missing required field "ChargeStateCache.charger_actual_current"`)}
	}
	if _, ok := cscc.mutation.ChargerVoltage(); !ok {
		return &ValidationError{Name: "charger_voltage", err: errors.New(`ent: missing required field "ChargeStateCache.charger_voltage"`)}
	}
	if _, ok := cscc.mutation.ChargingState(); !ok {
		return &ValidationError{Name: "charging_state", err: errors.New(`ent: missing required field "ChargeStateCache.charging_state"`)}
	}
	if _, ok := cscc.mutation.MinutesToFullCharge(); !ok {
		return &ValidationError{Name: "minutes_to_full_charge", err: errors.New(`ent: missing required field "ChargeStateCache.minutes_to_full_charge"`)}
	}
	if _, ok := cscc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ChargeStateCache.timestamp"`)}
	}
	if _, ok := cscc.mutation.UsableBatteryLevel(); !ok {
		return &ValidationError{Name: "usable_battery_level", err: errors.New(`ent: missing required field "ChargeStateCache.usable_battery_level"`)}
	}
	return nil
}

func (cscc *ChargeStateCacheCreate) sqlSave(ctx context.Context) (*ChargeStateCache, error) {
	if err := cscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cscc.mutation.id = &_node.ID
	cscc.mutation.done = true
	return _node, nil
}

func (cscc *ChargeStateCacheCreate) createSpec() (*ChargeStateCache, *sqlgraph.CreateSpec) {
	var (
		_node = &ChargeStateCache{config: cscc.config}
		_spec = sqlgraph.NewCreateSpec(chargestatecache.Table, sqlgraph.NewFieldSpec(chargestatecache.FieldID, field.TypeInt))
	)
	if value, ok := cscc.mutation.Vin(); ok {
		_spec.SetField(chargestatecache.FieldVin, field.TypeString, value)
		_node.Vin = value
	}
	if value, ok := cscc.mutation.BatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldBatteryLevel, field.TypeInt, value)
		_node.BatteryLevel = value
	}
	if value, ok := cscc.mutation.BatteryRange(); ok {
		_spec.SetField(chargestatecache.FieldBatteryRange, field.TypeFloat32, value)
		_node.BatteryRange = value
	}
	if value, ok := cscc.mutation.ChargeAmps(); ok {
		_spec.SetField(chargestatecache.FieldChargeAmps, field.TypeInt, value)
		_node.ChargeAmps = value
	}
	if value, ok := cscc.mutation.ChargeCurrentRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequest, field.TypeInt, value)
		_node.ChargeCurrentRequest = value
	}
	if value, ok := cscc.mutation.ChargeCurrentRequestMax(); ok {
		_spec.SetField(chargestatecache.FieldChargeCurrentRequestMax, field.TypeInt, value)
		_node.ChargeCurrentRequestMax = value
	}
	if value, ok := cscc.mutation.ChargeEnableRequest(); ok {
		_spec.SetField(chargestatecache.FieldChargeEnableRequest, field.TypeBool, value)
		_node.ChargeEnableRequest = value
	}
	if value, ok := cscc.mutation.ChargeLimitSoc(); ok {
		_spec.SetField(chargestatecache.FieldChargeLimitSoc, field.TypeInt, value)
		_node.ChargeLimitSoc = value
	}
	if value, ok := cscc.mutation.ChargePortDoorOpen(); ok {
		_spec.SetField(chargestatecache.FieldChargePortDoorOpen, field.TypeBool, value)
		_node.ChargePortDoorOpen = value
	}
	if value, ok := cscc.mutation.ChargePortLatch(); ok {
		_spec.SetField(chargestatecache.FieldChargePortLatch, field.TypeString, value)
		_node.ChargePortLatch = value
	}
	if value, ok := cscc.mutation.ChargerActualCurrent(); ok {
		_spec.SetField(chargestatecache.FieldChargerActualCurrent, field.TypeInt, value)
		_node.ChargerActualCurrent = value
	}
	if value, ok := cscc.mutation.ChargerVoltage(); ok {
		_spec.SetField(chargestatecache.FieldChargerVoltage, field.TypeInt, value)
		_node.ChargerVoltage = value
	}
	if value, ok := cscc.mutation.ChargingState(); ok {
		_spec.SetField(chargestatecache.FieldChargingState, field.TypeString, value)
		_node.ChargingState = value
	}
	if value, ok := cscc.mutation.MinutesToFullCharge(); ok {
		_spec.SetField(chargestatecache.FieldMinutesToFullCharge, field.TypeInt, value)
		_node.MinutesToFullCharge = value
	}
	if value, ok := cscc.mutation.Timestamp(); ok {
		_spec.SetField(chargestatecache.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := cscc.mutation.UsableBatteryLevel(); ok {
		_spec.SetField(chargestatecache.FieldUsableBatteryLevel, field.TypeInt, value)
		_node.UsableBatteryLevel = value
	}
	return _node, _spec
}

// ChargeStateCacheCreateBulk is the builder for creating many ChargeStateCache entities in bulk.
type ChargeStateCacheCreateBulk struct {
	config
	err      error
	builders []*ChargeStateCacheCreate
}

// Save creates the ChargeStateCache entities in the database.
func (csccb *ChargeStateCacheCreateBulk) Save(ctx context.Context) ([]*ChargeStateCache, error) {
	if csccb.err != nil {
		return nil, csccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csccb.builders))
	nodes := make([]*ChargeStateCache, len(csccb.builders))
	mutators := make([]Mutator, len(csccb.builders))
	for i := range csccb.builders {
		func(i int, root context.Context) {
			builder := csccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChargeStateCacheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csccb *ChargeStateCacheCreateBulk) SaveX(ctx context.Context) []*ChargeStateCache {
	v, err := csccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csccb *ChargeStateCacheCreateBulk) Exec(ctx context.Context) error {
	_, err := csccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csccb *ChargeStateCacheCreateBulk) ExecX(ctx context.Context) {
	if err := csccb.Exec(ctx); err != nil {
		panic(err)
	}
}
