// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/grant"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	grantFields := schema.Grant{}.Fields()
	_ = grantFields
	// grantDescSubject is the schema descriptor for subject field.
	grantDescSubject := grantFields[0].Descriptor()
	// grant.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	grant.SubjectValidator = grantDescSubject.Validators[0].(func(string) error)
	// grantDescAccessToken is the schema descriptor for access_token field.
	grantDescAccessToken := grantFields[1].Descriptor()
	// grant.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	grant.AccessTokenValidator = grantDescAccessToken.Validators[0].(func(string) error)
	// grantDescRefreshToken is the schema descriptor for refresh_token field.
	grantDescRefreshToken := grantFields[2].Descriptor()
	// grant.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	grant.RefreshTokenValidator = grantDescRefreshToken.Validators[0].(func(string) error)
	// grantDescScope is the schema descriptor for scope field.
	grantDescScope := grantFields[3].Descriptor()
	// grant.ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	grant.ScopeValidator = grantDescScope.Validators[0].(func(string) error)
}
