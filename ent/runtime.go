// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargesetting"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/grant"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chargesettingFields := schema.ChargeSetting{}.Fields()
	_ = chargesettingFields
	// chargesettingDescEnabled is the schema descriptor for enabled field.
	chargesettingDescEnabled := chargesettingFields[0].Descriptor()
	// chargesetting.DefaultEnabled holds the default value on creation for the enabled field.
	chargesetting.DefaultEnabled = chargesettingDescEnabled.Default.(bool)
	// chargesettingDescMinChargeThreshold is the schema descriptor for min_charge_threshold field.
	chargesettingDescMinChargeThreshold := chargesettingFields[5].Descriptor()
	// chargesetting.DefaultMinChargeThreshold holds the default value on creation for the min_charge_threshold field.
	chargesetting.DefaultMinChargeThreshold = chargesettingDescMinChargeThreshold.Default.(int)
	// chargesetting.MinChargeThresholdValidator is a validator for the "min_charge_threshold" field. It is called by the builders before save.
	chargesetting.MinChargeThresholdValidator = func() func(int) error {
		validators := chargesettingDescMinChargeThreshold.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(min_charge_threshold int) error {
			for _, fn := range fns {
				if err := fn(min_charge_threshold); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// chargesettingDescMinChargeTimeRangeStart is the schema descriptor for min_charge_time_range_start field.
	chargesettingDescMinChargeTimeRangeStart := chargesettingFields[6].Descriptor()
	// chargesetting.DefaultMinChargeTimeRangeStart holds the default value on creation for the min_charge_time_range_start field.
	chargesetting.DefaultMinChargeTimeRangeStart = chargesettingDescMinChargeTimeRangeStart.Default.(string)
	// chargesettingDescMinChargeTimeRangeEnd is the schema descriptor for min_charge_time_range_end field.
	chargesettingDescMinChargeTimeRangeEnd := chargesettingFields[7].Descriptor()
	// chargesetting.DefaultMinChargeTimeRangeEnd holds the default value on creation for the min_charge_time_range_end field.
	chargesetting.DefaultMinChargeTimeRangeEnd = chargesettingDescMinChargeTimeRangeEnd.Default.(string)
	// chargesettingDescMinChargeAmperage is the schema descriptor for min_charge_amperage field.
	chargesettingDescMinChargeAmperage := chargesettingFields[8].Descriptor()
	// chargesetting.DefaultMinChargeAmperage holds the default value on creation for the min_charge_amperage field.
	chargesetting.DefaultMinChargeAmperage = chargesettingDescMinChargeAmperage.Default.(int)
	// chargesetting.MinChargeAmperageValidator is a validator for the "min_charge_amperage" field. It is called by the builders before save.
	chargesetting.MinChargeAmperageValidator = func() func(int) error {
		validators := chargesettingDescMinChargeAmperage.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(min_charge_amperage int) error {
			for _, fn := range fns {
				if err := fn(min_charge_amperage); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	grantFields := schema.Grant{}.Fields()
	_ = grantFields
	// grantDescSubject is the schema descriptor for subject field.
	grantDescSubject := grantFields[0].Descriptor()
	// grant.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	grant.SubjectValidator = grantDescSubject.Validators[0].(func(string) error)
	// grantDescAccessToken is the schema descriptor for access_token field.
	grantDescAccessToken := grantFields[1].Descriptor()
	// grant.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	grant.AccessTokenValidator = grantDescAccessToken.Validators[0].(func(string) error)
	// grantDescRefreshToken is the schema descriptor for refresh_token field.
	grantDescRefreshToken := grantFields[2].Descriptor()
	// grant.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	grant.RefreshTokenValidator = grantDescRefreshToken.Validators[0].(func(string) error)
	// grantDescScope is the schema descriptor for scope field.
	grantDescScope := grantFields[3].Descriptor()
	// grant.ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	grant.ScopeValidator = grantDescScope.Validators[0].(func(string) error)
}
