// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/chargecommandhistory"
)

// ChargeCommandHistoryCreate is the builder for creating a ChargeCommandHistory entity.
type ChargeCommandHistoryCreate struct {
	config
	mutation *ChargeCommandHistoryMutation
	hooks    []Hook
}

// SetVin sets the "vin" field.
func (cchc *ChargeCommandHistoryCreate) SetVin(s string) *ChargeCommandHistoryCreate {
	cchc.mutation.SetVin(s)
	return cchc
}

// SetOperation sets the "operation" field.
func (cchc *ChargeCommandHistoryCreate) SetOperation(s string) *ChargeCommandHistoryCreate {
	cchc.mutation.SetOperation(s)
	return cchc
}

// SetAmps sets the "amps" field.
func (cchc *ChargeCommandHistoryCreate) SetAmps(i int) *ChargeCommandHistoryCreate {
	cchc.mutation.SetAmps(i)
	return cchc
}

// SetTimestamp sets the "timestamp" field.
func (cchc *ChargeCommandHistoryCreate) SetTimestamp(t time.Time) *ChargeCommandHistoryCreate {
	cchc.mutation.SetTimestamp(t)
	return cchc
}

// Mutation returns the ChargeCommandHistoryMutation object of the builder.
func (cchc *ChargeCommandHistoryCreate) Mutation() *ChargeCommandHistoryMutation {
	return cchc.mutation
}

// Save creates the ChargeCommandHistory in the database.
func (cchc *ChargeCommandHistoryCreate) Save(ctx context.Context) (*ChargeCommandHistory, error) {
	return withHooks(ctx, cchc.sqlSave, cchc.mutation, cchc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cchc *ChargeCommandHistoryCreate) SaveX(ctx context.Context) *ChargeCommandHistory {
	v, err := cchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cchc *ChargeCommandHistoryCreate) Exec(ctx context.Context) error {
	_, err := cchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cchc *ChargeCommandHistoryCreate) ExecX(ctx context.Context) {
	if err := cchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cchc *ChargeCommandHistoryCreate) check() error {
	if _, ok := cchc.mutation.Vin(); !ok {
		return &ValidationError{Name: "vin", err: errors.New(`ent: missing required field "ChargeCommandHistory.vin"`)}
	}
	if _, ok := cchc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "ChargeCommandHistory.operation"`)}
	}
	if _, ok := cchc.mutation.Amps(); !ok {
		return &ValidationError{Name: "amps", err: errors.New(`ent: missing required field "ChargeCommandHistory.amps"`)}
	}
	if _, ok := cchc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ChargeCommandHistory.timestamp"`)}
	}
	return nil
}

func (cchc *ChargeCommandHistoryCreate) sqlSave(ctx context.Context) (*ChargeCommandHistory, error) {
	if err := cchc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cchc.mutation.id = &_node.ID
	cchc.mutation.done = true
	return _node, nil
}

func (cchc *ChargeCommandHistoryCreate) createSpec() (*ChargeCommandHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ChargeCommandHistory{config: cchc.config}
		_spec = sqlgraph.NewCreateSpec(chargecommandhistory.Table, sqlgraph.NewFieldSpec(chargecommandhistory.FieldID, field.TypeInt))
	)
	if value, ok := cchc.mutation.Vin(); ok {
		_spec.SetField(chargecommandhistory.FieldVin, field.TypeString, value)
		_node.Vin = value
	}
	if value, ok := cchc.mutation.Operation(); ok {
		_spec.SetField(chargecommandhistory.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	if value, ok := cchc.mutation.Amps(); ok {
		_spec.SetField(chargecommandhistory.FieldAmps, field.TypeInt, value)
		_node.Amps = value
	}
	if value, ok := cchc.mutation.Timestamp(); ok {
		_spec.SetField(chargecommandhistory.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	return _node, _spec
}

// ChargeCommandHistoryCreateBulk is the builder for creating many ChargeCommandHistory entities in bulk.
type ChargeCommandHistoryCreateBulk struct {
	config
	err      error
	builders []*ChargeCommandHistoryCreate
}

// Save creates the ChargeCommandHistory entities in the database.
func (cchcb *ChargeCommandHistoryCreateBulk) Save(ctx context.Context) ([]*ChargeCommandHistory, error) {
	if cchcb.err != nil {
		return nil, cchcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cchcb.builders))
	nodes := make([]*ChargeCommandHistory, len(cchcb.builders))
	mutators := make([]Mutator, len(cchcb.builders))
	for i := range cchcb.builders {
		func(i int, root context.Context) {
			builder := cchcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChargeCommandHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cchcb *ChargeCommandHistoryCreateBulk) SaveX(ctx context.Context) []*ChargeCommandHistory {
	v, err := cchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cchcb *ChargeCommandHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := cchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cchcb *ChargeCommandHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := cchcb.Exec(ctx); err != nil {
		panic(err)
	}
}
