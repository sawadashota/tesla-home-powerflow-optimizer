// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/grant"
	"github.com/sawadashota/tesla-home-powerflow-optimizer/ent/predicate"
)

// GrantUpdate is the builder for updating Grant entities.
type GrantUpdate struct {
	config
	hooks    []Hook
	mutation *GrantMutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (gu *GrantUpdate) Where(ps ...predicate.Grant) *GrantUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetSubject sets the "subject" field.
func (gu *GrantUpdate) SetSubject(s string) *GrantUpdate {
	gu.mutation.SetSubject(s)
	return gu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (gu *GrantUpdate) SetNillableSubject(s *string) *GrantUpdate {
	if s != nil {
		gu.SetSubject(*s)
	}
	return gu
}

// SetAccessToken sets the "access_token" field.
func (gu *GrantUpdate) SetAccessToken(s string) *GrantUpdate {
	gu.mutation.SetAccessToken(s)
	return gu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (gu *GrantUpdate) SetNillableAccessToken(s *string) *GrantUpdate {
	if s != nil {
		gu.SetAccessToken(*s)
	}
	return gu
}

// SetRefreshToken sets the "refresh_token" field.
func (gu *GrantUpdate) SetRefreshToken(s string) *GrantUpdate {
	gu.mutation.SetRefreshToken(s)
	return gu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (gu *GrantUpdate) SetNillableRefreshToken(s *string) *GrantUpdate {
	if s != nil {
		gu.SetRefreshToken(*s)
	}
	return gu
}

// SetScope sets the "scope" field.
func (gu *GrantUpdate) SetScope(s string) *GrantUpdate {
	gu.mutation.SetScope(s)
	return gu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (gu *GrantUpdate) SetNillableScope(s *string) *GrantUpdate {
	if s != nil {
		gu.SetScope(*s)
	}
	return gu
}

// SetExpiry sets the "expiry" field.
func (gu *GrantUpdate) SetExpiry(t time.Time) *GrantUpdate {
	gu.mutation.SetExpiry(t)
	return gu
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (gu *GrantUpdate) SetNillableExpiry(t *time.Time) *GrantUpdate {
	if t != nil {
		gu.SetExpiry(*t)
	}
	return gu
}

// Mutation returns the GrantMutation object of the builder.
func (gu *GrantUpdate) Mutation() *GrantMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GrantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GrantUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GrantUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GrantUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GrantUpdate) check() error {
	if v, ok := gu.mutation.Subject(); ok {
		if err := grant.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Grant.subject": %w`, err)}
		}
	}
	if v, ok := gu.mutation.AccessToken(); ok {
		if err := grant.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "Grant.access_token": %w`, err)}
		}
	}
	if v, ok := gu.mutation.RefreshToken(); ok {
		if err := grant.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "Grant.refresh_token": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Scope(); ok {
		if err := grant.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "Grant.scope": %w`, err)}
		}
	}
	return nil
}

func (gu *GrantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Subject(); ok {
		_spec.SetField(grant.FieldSubject, field.TypeString, value)
	}
	if value, ok := gu.mutation.AccessToken(); ok {
		_spec.SetField(grant.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := gu.mutation.RefreshToken(); ok {
		_spec.SetField(grant.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := gu.mutation.Scope(); ok {
		_spec.SetField(grant.FieldScope, field.TypeString, value)
	}
	if value, ok := gu.mutation.Expiry(); ok {
		_spec.SetField(grant.FieldExpiry, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GrantUpdateOne is the builder for updating a single Grant entity.
type GrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantMutation
}

// SetSubject sets the "subject" field.
func (guo *GrantUpdateOne) SetSubject(s string) *GrantUpdateOne {
	guo.mutation.SetSubject(s)
	return guo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableSubject(s *string) *GrantUpdateOne {
	if s != nil {
		guo.SetSubject(*s)
	}
	return guo
}

// SetAccessToken sets the "access_token" field.
func (guo *GrantUpdateOne) SetAccessToken(s string) *GrantUpdateOne {
	guo.mutation.SetAccessToken(s)
	return guo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableAccessToken(s *string) *GrantUpdateOne {
	if s != nil {
		guo.SetAccessToken(*s)
	}
	return guo
}

// SetRefreshToken sets the "refresh_token" field.
func (guo *GrantUpdateOne) SetRefreshToken(s string) *GrantUpdateOne {
	guo.mutation.SetRefreshToken(s)
	return guo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableRefreshToken(s *string) *GrantUpdateOne {
	if s != nil {
		guo.SetRefreshToken(*s)
	}
	return guo
}

// SetScope sets the "scope" field.
func (guo *GrantUpdateOne) SetScope(s string) *GrantUpdateOne {
	guo.mutation.SetScope(s)
	return guo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableScope(s *string) *GrantUpdateOne {
	if s != nil {
		guo.SetScope(*s)
	}
	return guo
}

// SetExpiry sets the "expiry" field.
func (guo *GrantUpdateOne) SetExpiry(t time.Time) *GrantUpdateOne {
	guo.mutation.SetExpiry(t)
	return guo
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableExpiry(t *time.Time) *GrantUpdateOne {
	if t != nil {
		guo.SetExpiry(*t)
	}
	return guo
}

// Mutation returns the GrantMutation object of the builder.
func (guo *GrantUpdateOne) Mutation() *GrantMutation {
	return guo.mutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (guo *GrantUpdateOne) Where(ps ...predicate.Grant) *GrantUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GrantUpdateOne) Select(field string, fields ...string) *GrantUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Grant entity.
func (guo *GrantUpdateOne) Save(ctx context.Context) (*Grant, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GrantUpdateOne) SaveX(ctx context.Context) *Grant {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GrantUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GrantUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GrantUpdateOne) check() error {
	if v, ok := guo.mutation.Subject(); ok {
		if err := grant.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Grant.subject": %w`, err)}
		}
	}
	if v, ok := guo.mutation.AccessToken(); ok {
		if err := grant.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "Grant.access_token": %w`, err)}
		}
	}
	if v, ok := guo.mutation.RefreshToken(); ok {
		if err := grant.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "Grant.refresh_token": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Scope(); ok {
		if err := grant.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "Grant.scope": %w`, err)}
		}
	}
	return nil
}

func (guo *GrantUpdateOne) sqlSave(ctx context.Context) (_node *Grant, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grant.FieldID)
		for _, f := range fields {
			if !grant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Subject(); ok {
		_spec.SetField(grant.FieldSubject, field.TypeString, value)
	}
	if value, ok := guo.mutation.AccessToken(); ok {
		_spec.SetField(grant.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := guo.mutation.RefreshToken(); ok {
		_spec.SetField(grant.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := guo.mutation.Scope(); ok {
		_spec.SetField(grant.FieldScope, field.TypeString, value)
	}
	if value, ok := guo.mutation.Expiry(); ok {
		_spec.SetField(grant.FieldExpiry, field.TypeTime, value)
	}
	_node = &Grant{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
