// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ErrorCode.
const (
	FailedPrecondition  ErrorCode = "FailedPrecondition"
	InternalServerError ErrorCode = "InternalServerError"
	NotFound            ErrorCode = "NotFound"
	ValidationError     ErrorCode = "ValidationError"
)

// Defines values for VehicleDataState.
const (
	Offline VehicleDataState = "offline"
	Online  VehicleDataState = "online"
)

// ChargeSettingSetting defines model for Charge.Setting.Setting.
type ChargeSettingSetting struct {
	Enabled bool `json:"enabled"`
}

// ChargeState defines model for ChargeState.
type ChargeState struct {
	BatteryLevel            int     `json:"battery_level"`
	BatteryRange            float32 `json:"battery_range"`
	ChargeAmps              int     `json:"charge_amps"`
	ChargeCurrentRequest    int     `json:"charge_current_request"`
	ChargeCurrentRequestMax int     `json:"charge_current_request_max"`
	ChargeEnableRequest     bool    `json:"charge_enable_request"`
	ChargeLimitSoc          int     `json:"charge_limit_soc"`
	ChargePortDoorOpen      bool    `json:"charge_port_door_open"`
	ChargePortLatch         string  `json:"charge_port_latch"`
	ChargerActualCurrent    int     `json:"charger_actual_current"`
	ChargerVoltage          int     `json:"charger_voltage"`
	ChargingState           string  `json:"charging_state"`
	MinutesToFullCharge     int     `json:"minutes_to_full_charge"`
	TimeToFullCharge        float32 `json:"time_to_full_charge"`
	Timestamp               int64   `json:"timestamp"`
	UsableBatteryLevel      int     `json:"usable_battery_level"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// VehicleData defines model for VehicleData.
type VehicleData struct {
	ChargeState ChargeState      `json:"charge_state"`
	State       VehicleDataState `json:"state"`
	Vin         string           `json:"vin"`
}

// VehicleDataState defines model for VehicleData.State.
type VehicleDataState string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /vehicle)
	GetVehicleData(w http.ResponseWriter, r *http.Request)

	// (GET /vehicle/charge/setting)
	SettingGetVehicleChargeSetting(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /vehicle)
func (_ Unimplemented) GetVehicleData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /vehicle/charge/setting)
func (_ Unimplemented) SettingGetVehicleChargeSetting(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetVehicleData operation middleware
func (siw *ServerInterfaceWrapper) GetVehicleData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVehicleData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SettingGetVehicleChargeSetting operation middleware
func (siw *ServerInterfaceWrapper) SettingGetVehicleChargeSetting(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SettingGetVehicleChargeSetting(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vehicle", wrapper.GetVehicleData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vehicle/charge/setting", wrapper.SettingGetVehicleChargeSetting)
	})

	return r
}

type GetVehicleDataRequestObject struct {
}

type GetVehicleDataResponseObject interface {
	VisitGetVehicleDataResponse(w http.ResponseWriter) error
}

type GetVehicleData200JSONResponse VehicleData

func (response GetVehicleData200JSONResponse) VisitGetVehicleDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVehicleData400JSONResponse Error

func (response GetVehicleData400JSONResponse) VisitGetVehicleDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetVehicleData500JSONResponse Error

func (response GetVehicleData500JSONResponse) VisitGetVehicleDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SettingGetVehicleChargeSettingRequestObject struct {
}

type SettingGetVehicleChargeSettingResponseObject interface {
	VisitSettingGetVehicleChargeSettingResponse(w http.ResponseWriter) error
}

type SettingGetVehicleChargeSetting200JSONResponse ChargeSettingSetting

func (response SettingGetVehicleChargeSetting200JSONResponse) VisitSettingGetVehicleChargeSettingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /vehicle)
	GetVehicleData(ctx context.Context, request GetVehicleDataRequestObject) (GetVehicleDataResponseObject, error)

	// (GET /vehicle/charge/setting)
	SettingGetVehicleChargeSetting(ctx context.Context, request SettingGetVehicleChargeSettingRequestObject) (SettingGetVehicleChargeSettingResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetVehicleData operation middleware
func (sh *strictHandler) GetVehicleData(w http.ResponseWriter, r *http.Request) {
	var request GetVehicleDataRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVehicleData(ctx, request.(GetVehicleDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVehicleData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVehicleDataResponseObject); ok {
		if err := validResponse.VisitGetVehicleDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SettingGetVehicleChargeSetting operation middleware
func (sh *strictHandler) SettingGetVehicleChargeSetting(w http.ResponseWriter, r *http.Request) {
	var request SettingGetVehicleChargeSettingRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SettingGetVehicleChargeSetting(ctx, request.(SettingGetVehicleChargeSettingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SettingGetVehicleChargeSetting")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SettingGetVehicleChargeSettingResponseObject); ok {
		if err := validResponse.VisitSettingGetVehicleChargeSettingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW32vkNhD+V4zaR5P1tdcS/FbSuxJoy0HKvYRgZuVZW4c0UqXxkhD2fy+S7P1p7xHa",
	"3lO81jeame/7ZuJXIa1xlpA4iPpVBNmjgfR414Pv8OYBmRV109944rx16FlhwiHBWmMbH/nFoajF2lqN",
	"QGK3K4XHvwfl4/HjHvlUTki7/oKSxa4csz0wMF6mWAMz+pdG4xZ1fGHgWZnBiPpdVZXCKMq/qv3Fihg7",
	"9PHmKdgDdXhUJQ1mnREy5W7AuHB0fnTFCJCD90jcxJ4w8FuwjYHnq/jMzczVezL3UK2M4iZY+VYmxnhn",
	"PTettb6xDulqqgTVwLJPSj+DcToiP1AHHbZinyWwj+bYR/oGJA+gJx6u9e6brdUMJ+KcgxR1TZjMcajj",
	"bjybK8QoGhhDw7bZDFo3Odl8DlYGl4EHp0RcYDAunm6sN8D5op/fiznGh5BU/Rf+PRuh05vOzX1q5UXf",
	"XjXpkiNn7LfkqDn7LBrj0gUXki9qOS/csUwLEsxtoA/eW3+5e6Rtkxe+97gRtfhudViYq3FbrlLoXQRG",
	"32EIp2aePHmmZbr5gF+s6W6sACl65FF8BKWx/eRRWmoVKxsZ/wxatRB/5D5K8aflj3agOKT3xOgJ9AP6",
	"LfoMeJoZmc/YK6nxV2CYISJrup/Ca4Qcb/NdKQ6TO7ZgSSuKzdvNJj3NVbNVaTkZRb8jddyL+l35FUpj",
	"yJSuPK34kt4YrGhjk1KKTxZK8QcQdGiQuIisKRkv3KIPke5aVDfVTRWLjIYHp0QtfkyvSuGA+0TYapvp",
	"jM8dphUY+Uwi3beiFr8hHzMeWwnOUsh8/1BV2X/E4wIF57SSKX71JVg6/MP+mh7HaVLfLQbplePczV89",
	"FuOcFz2EIgxSIrbY3sQW3/+HhWTvLZQQkj0LaQfdFmS5GKhFHxioLfioxHbAgm2haBtNX4QXYnhOpf70",
	"LUrNU1TgdL4r91KvsuVW4fCxNKv8+DF1MMA4MGPY/+iEha+6N5oid531CqJ+fD2L/eXT/aQmUuusSot+",
	"8FrUomd29WqlrQTd28D1bXV7K3ZPu38CAAD//z9FhqqMCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
